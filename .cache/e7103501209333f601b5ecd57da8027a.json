{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}},{"name":"fs","loc":{"line":148,"column":17}},{"name":"C:\\Users\\canno\\Documents\\Code\\parcel-crafty\\node_modules\\craftyjs\\src\\graphics\\shaders\\color.vert","includedInParent":true},{"name":"C:\\Users\\canno\\Documents\\Code\\parcel-crafty\\node_modules\\craftyjs\\src\\graphics\\shaders\\color.frag","includedInParent":true}],"generated":{"js":"var Crafty = require('../core/core.js'),\n    document = window.document;\n\n/**@\n * #Crafty.assignColor\n * @category Graphics\n * @kind Method\n * \n * Maps a wide vareity of color representations to a set of simple rgb(a) properties. \n * \n * @sign Crafty.assignColor(color[, assignee])\n * @param color - a string represenation of the color to assign, in any valid HTML format\n * @param assignee - an object to use instead of creating one from scratch\n * @returns  An object with `_red`, `_green`, and `_blue` properties assigned.\n *           Potentially with `_strength` representing the alpha channel.\n *           If the assignee parameter is passed, that object will be assigned those values and returned.\n */\nCrafty.extend({\n  assignColor: function () {\n\n    // Create phantom element to assess color\n    var element = document.createElement(\"div\");\n    element.style.display = \"none\";\n    // Can't attach it til later on, so we need a flag!\n    var element_attached = false;\n    var dictionary = {\n      \"aqua\": \"#00ffff\",\n      \"black\": \"#000000\",\n      \"blue\": \"#0000ff\",\n      \"fuchsia\": \"#ff00ff\",\n      \"gray\": \"#808080\",\n      \"green\": \"#00ff00\",\n      \"lime\": \"#00ff00\",\n      \"maroon\": \"#800000\",\n      \"navy\": \"#000080\",\n      \"olive\": \"#808000\",\n      \"orange\": \"#ffa500\",\n      \"purple\": \"#800080\",\n      \"red\": \"#ff0000\",\n      \"silver\": \"#c0c0c0\",\n      \"teal\": \"#008080\",\n      \"white\": \"#ffffff\",\n      \"yellow\": \"#ffff00\"\n    };\n\n    function default_value(c) {\n      c._red = c._blue = c._green = 0;\n      return c;\n    }\n\n    function hexComponent(component) {\n      var hex = component.toString(16);\n      if (hex.length === 1) hex = \"0\" + hex;\n      return hex;\n    }\n\n    function rgbToHex(r, g, b) {\n      return \"#\" + hexComponent(r) + hexComponent(g) + hexComponent(b);\n    }\n\n    function parseHexString(hex, c) {\n      var r,\n          g,\n          b,\n          l = hex.length;\n\n      if (l === 7) {\n        r = hex.substr(1, 2);\n        g = hex.substr(3, 2);\n        b = hex.substr(5, 2);\n      } else if (l === 4) {\n        r = hex.substr(1, 1);r += r;\n        g = hex.substr(2, 1);g += g;\n        b = hex.substr(3, 1);b += b;\n      } else {\n        return default_value(c);\n      }\n      c._red = parseInt(r, 16);\n      c._green = parseInt(g, 16);\n      c._blue = parseInt(b, 16);\n\n      return c;\n    }\n\n    var rgb_regex = /rgba?\\s*\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,?\\s*([0-9.]+)?\\)/;\n\n    function parseRgbString(rgb, c) {\n      var values = rgb_regex.exec(rgb);\n      if (values === null || values.length !== 4 && values.length !== 5) {\n        return default_value(c); // return bad result?\n      }\n      c._red = Math.round(parseFloat(values[1]));\n      c._green = Math.round(parseFloat(values[2]));\n      c._blue = Math.round(parseFloat(values[3]));\n      if (values[4]) {\n        c._strength = parseFloat(values[4]);\n      }\n      return c;\n    }\n\n    function parseColorName(key, c) {\n      if (typeof dictionary[key] === \"undefined\") {\n        if (element_attached === false) {\n          window.document.body.appendChild(element);\n          element_attached = true;\n        }\n        element.style.color = key;\n        var rgb = window.getComputedStyle(element).color;\n        parseRgbString(rgb, c);\n        dictionary[key] = rgbToHex(c._red, c._green, c._blue);\n        //window.document.body.removeChild(element);\n      } else {\n        parseHexString(dictionary[key], c);\n      }\n      return c;\n    }\n\n    function rgbaString(c) {\n      return \"rgba(\" + c._red + \", \" + c._green + \", \" + c._blue + \", \" + c._strength + \")\";\n    }\n\n    // The actual assignColor function\n    return function (color, c) {\n      c = c || {};\n      color = color.trim().toLowerCase();\n      var ret = null;\n      if (color[0] === '#') {\n        ret = parseHexString(color, c);\n      } else if (color[0] === 'r' && color[1] === 'g' && color[2] === 'b') {\n        ret = parseRgbString(color, c);\n      } else {\n        ret = parseColorName(color, c);\n      }\n      c._strength = c._strength || 1.0;\n      c._color = rgbaString(c);\n    };\n  }()\n});\n\n// Define some variables required for webgl\nvar fs = require('fs');\n\nCrafty.defaultShader(\"Color\", new Crafty.WebGLShader(\"attribute vec2 aPosition;\\nattribute vec3 aOrientation;\\nattribute vec2 aLayer;\\nattribute vec4 aColor;\\n\\nvarying lowp vec4 vColor;\\n\\nuniform  vec4 uViewport;\\n\\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\\n\\nvoid main() {\\n  vec2 pos = aPosition;\\n  vec2 entityOrigin = aOrientation.xy;\\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\\n\\n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin;\\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\\n  vColor = vec4(aColor.rgb*aColor.a*aLayer.y, aColor.a*aLayer.y);\\n}\", \"precision mediump float;\\nvarying lowp vec4 vColor;\\nvoid main(void) {\\n\\tgl_FragColor = vColor;\\n}\", [{ name: \"aPosition\", width: 2 }, { name: \"aOrientation\", width: 3 }, { name: \"aLayer\", width: 2 }, { name: \"aColor\", width: 4 }], function (e, entity) {\n  e.program.writeVector(\"aColor\", entity._red / 255, entity._green / 255, entity._blue / 255, entity._strength);\n}));\n\n/**@\n * #Color\n * @category Graphics\n * @kind Component\n * \n * Draw a colored rectangle.\n */\nCrafty.c(\"Color\", {\n  _red: 0,\n  _green: 0,\n  _blue: 0,\n  _strength: 1.0,\n  _color: \"\",\n  ready: true,\n\n  init: function () {\n    this.bind(\"Draw\", this._drawColor);\n    if (this._drawLayer) {\n      this._setupColor(this._drawLayer);\n    }\n    this.trigger(\"Invalidate\");\n  },\n\n  events: {\n    \"LayerAttached\": \"_setupColor\"\n  },\n\n  remove: function () {\n    this.unbind(\"Draw\", this._drawColor);\n    if (this.has(\"DOM\")) {\n      this._element.style.backgroundColor = \"transparent\";\n    }\n    this.trigger(\"Invalidate\");\n  },\n\n  _setupColor: function (layer) {\n    if (layer.type === \"WebGL\") {\n      this._establishShader(\"Color\", Crafty.defaultShader(\"Color\"));\n    }\n  },\n\n  // draw function for \"Color\"\n  _drawColor: function (e) {\n    if (!this._color) {\n      return;\n    }\n    if (e.type === \"DOM\") {\n      e.style.backgroundColor = this._color;\n      e.style.lineHeight = 0;\n    } else if (e.type === \"canvas\") {\n      e.ctx.fillStyle = this._color;\n      e.ctx.fillRect(e.pos._x, e.pos._y, e.pos._w, e.pos._h);\n    } else if (e.type === \"webgl\") {\n      e.program.draw(e, this);\n    }\n  },\n\n  /**@\n   * #.color\n   * @comp Color\n   * @kind Method\n   * \n   * @trigger Invalidate - when the color changes\n   *\n   * Will assign the color and opacity, either through a string shorthand, or through explicit rgb values.\n   * @sign public this .color(String color[, Float strength])\n   * @param color - Color of the rectangle\n   * @param strength - the opacity of the rectangle\n   *\n   * @sign public this .color(r, g, b[, strength])\n   * @param r - value for the red channel\n   * @param g - value for the green channel\n   * @param b - value for the blue channel\n   * @param strength - the opacity of the rectangle\n   *\n   * @sign public String .color()\n   * @return A string representing the current color as a CSS property.\n   *\n   * @example\n   * ```\n   * var c = Crafty.e(\"2D, DOM, Color\");\n   * c.color(\"#FF0000\");\n   * c.color(\"red\");\n   * c.color(255, 0, 0);\n   * c.color(\"rgb(255, 0, 0)\");\n   * ```\n   * Three different ways of assign the color red.\n   * ```\n   * var c = Crafty.e(\"2D, DOM, Color\");\n   * c.color(\"#00FF00\", 0.5);\n   * c.color(\"rgba(0, 255, 0, 0.5)\");\n   * ```\n   * Two ways of assigning a transparent green color.\n   */\n  color: function (color) {\n    if (arguments.length === 0) {\n      return this._color;\n    } else if (arguments.length >= 3) {\n      this._red = arguments[0];\n      this._green = arguments[1];\n      this._blue = arguments[2];\n      if (typeof arguments[3] === \"number\") this._strength = arguments[3];\n    } else {\n      // First argument is color name\n      Crafty.assignColor(color, this);\n      // Second argument, if present, is strength of color\n      // Note that assignColor will give a default strength of 1.0 if none exists.\n      if (typeof arguments[1] === \"number\") this._strength = arguments[1];\n    }\n    this._color = \"rgba(\" + this._red + \", \" + this._green + \", \" + this._blue + \", \" + this._strength + \")\";\n    this.trigger(\"Invalidate\");\n    return this;\n  }\n});"},"hash":"dec4d2363ea0b7a6151916ac754efefd"}