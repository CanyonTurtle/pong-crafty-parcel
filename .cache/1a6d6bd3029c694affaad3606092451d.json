{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\nvar Crafty = require('../core/core.js');\nvar document = (typeof window !== \"undefined\") && window.document;\n\n/**@\n * #Crafty.support\n * @category Misc, Core\n * @kind CoreObject\n * \n * Determines feature support for what Crafty can do.\n */\n(function testSupport() {\n    var support = Crafty.support = {},\n        ua = (typeof navigator !== \"undefined\" && navigator.userAgent.toLowerCase()) || (typeof process !== \"undefined\" && process.version),\n        match = /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\n            /(o)pera(?:.*version)?[ \\/]([\\w.]+)/.exec(ua) ||\n            /(ms)ie ([\\w.]+)/.exec(ua) ||\n            /(moz)illa(?:.*? rv:([\\w.]+))?/.exec(ua) ||\n            /(v)\\d+\\.(\\d+)/.exec(ua) || [],\n        mobile = /iPad|iPod|iPhone|Android|webOS|IEMobile/i.exec(ua);\n\n    /**@\n     * #Crafty.mobile\n     * @comp Crafty.device\n     * @kind Property\n     *\n     * Determines if Crafty is running on mobile device.\n     *\n     * If Crafty.mobile is equal true Crafty does some things under hood:\n     * ~~~\n     * - set viewport on max device width and height\n     * - set Crafty.stage.fullscreen on true\n     * - hide window scrollbars\n     * ~~~\n     *\n     * @see Crafty.viewport\n     */\n    if (mobile) Crafty.mobile = mobile[0];\n\n    /**@\n     * #Crafty.support.defineProperty\n     * @comp Crafty.support\n     * @kind Property\n     * \n     * Is `Object.defineProperty` supported?\n     */\n    support.defineProperty = (function () {\n        if (!('defineProperty' in Object)) return false;\n        try {\n            Object.defineProperty({}, 'x', {});\n        } catch (e) {\n            return false;\n        }\n        return true;\n    })();\n\n    /**@\n     * #Crafty.support.audio\n     * @comp Crafty.support\n     * @kind Property\n     * \n     * Is HTML5 `Audio` supported?\n     */\n    support.audio = (typeof window !== \"undefined\") && ('canPlayType' in document.createElement('audio'));\n\n    /**@\n     * #Crafty.support.prefix\n     * @comp Crafty.support\n     * @kind Property\n     * \n     * Returns the browser specific prefix (`Moz`, `O`, `ms`, `webkit`, `node`).\n     */\n    support.prefix = (match[1] || match[0]);\n\n    //browser specific quirks\n    if (support.prefix === \"moz\") support.prefix = \"Moz\";\n    if (support.prefix === \"o\") support.prefix = \"O\";\n    if (support.prefix === \"v\") support.prefix = \"node\";\n\n    if (match[2]) {\n        /**@\n         * #Crafty.support.versionName\n         * @comp Crafty.support\n         * @kind Property\n         * \n         * Version of the browser\n         */\n        support.versionName = match[2];\n\n        /**@\n         * #Crafty.support.version\n         * @comp Crafty.support\n         * @kind Property\n         * \n         * Version number of the browser as an Integer (first number)\n         */\n        support.version = +(match[2].split(\".\"))[0];\n    }\n\n    /**@\n     * #Crafty.support.canvas\n     * @comp Crafty.support\n     * @kind Property\n     * \n     * Is the `canvas` element supported?\n     */\n    support.canvas = (typeof window !== \"undefined\") && ('getContext' in document.createElement(\"canvas\"));\n\n    /**@\n     * #Crafty.support.webgl\n     * @comp Crafty.support\n     * @kind Property\n     * \n     * Is WebGL supported on the canvas element?\n     */\n    if (support.canvas) {\n        var gl;\n        try {\n            var c = document.createElement(\"canvas\");\n            gl = c.getContext(\"webgl\") || c.getContext(\"experimental-webgl\");\n            gl.viewportWidth = support.canvas.width;\n            gl.viewportHeight = support.canvas.height;\n        } catch (e) {}\n        support.webgl = !! gl;\n    } else {\n        support.webgl = false;\n    }\n\n    /**@\n     * #Crafty.support.css3dtransform\n     * @comp Crafty.support\n     * @kind Property\n     * \n     * Is css3Dtransform supported by browser.\n     */\n    support.css3dtransform = (typeof window !== \"undefined\") && ((typeof document.createElement(\"div\").style.Perspective !== \"undefined\") || (typeof document.createElement(\"div\").style[support.prefix + \"Perspective\"] !== \"undefined\"));\n\n    /**@\n     * #Crafty.support.deviceorientation\n     * @comp Crafty.support\n     * @kind Property\n     * Is deviceorientation event supported by browser.\n     */\n    support.deviceorientation = (typeof window !== \"undefined\") && ((typeof window.DeviceOrientationEvent !== \"undefined\") || (typeof window.OrientationEvent !== \"undefined\"));\n\n    /**@\n     * #Crafty.support.devicemotion\n     * @comp Crafty.support\n     * @kind Property\n     * \n     * Is devicemotion event supported by browser.\n     */\n    support.devicemotion = (typeof window !== \"undefined\") && (typeof window.DeviceMotionEvent !== \"undefined\");\n\n})();\n\nmodule.exports = {\n    _events: {},\n\n    /**@\n     * #Crafty.addEvent\n     * @category Events, Misc\n     * @kind Method\n     * \n     * @sign public this Crafty.addEvent(Object ctx, HTMLElement obj, String event, Function callback)\n     * @param ctx - Context of the callback or the value of `this`\n     * @param obj - Element to add the DOM event to\n     * @param event - Event name to bind to\n     * @param callback - Method to execute when triggered\n     *\n     * Adds DOM level 3 events to elements. The arguments it accepts are the call\n     * context (the value of `this`), the DOM element to attach the event to,\n     * the event name (without `on` (`click` rather than `onclick`)) and\n     * finally the callback method.\n     *\n     * If no element is passed, the default element will be `window.document`.\n     *\n     * Callbacks are passed with event data.\n     *\n     * @note This is related to DOM events only,  not Crafty's own event system.  \n     * Of course, you can trigger Crafty events in the callback function!\n     *\n     * @example\n     * Normally you'd use Crafty's built-in mouse component, but for the sake of an example let's pretend that doesn't exist.  \n     * The following code will add a stage-wide MouseDown event listener to the player, and log both which button was pressed\n     * and the (x,y) coordinates in viewport/world/game space.\n     * ~~~\n     * var player = Crafty.e(\"2D\");\n     *     player.onMouseDown = function(e) {\n     *         Crafty.log(e.mouseButton, e.realX, e.realY);\n     *     };\n     * Crafty.addEvent(player, Crafty.stage.elem, \"mousedown\", player.onMouseDown);\n     * ~~~\n     * @see Crafty.removeEvent\n     */\n    addEvent: function (ctx, obj, type, callback) {\n        if (arguments.length === 3) {\n            callback = type;\n            type = obj;\n            obj = window.document;\n        }\n\n        //save anonymous function to be able to remove\n        var afn = function (e) {\n            callback.call(ctx, e);\n        },\n            id = ctx[0] || \"\";\n\n        if (!this._events[id + obj + type + callback]) \n            this._events[id + obj + type + callback] = afn;\n        else  {\n            return;\n        }\n\n        obj.addEventListener(type, afn, false);\n        \n    },\n\n    /**@\n     * #Crafty.removeEvent\n     * @category Events, Misc\n     * @kind Method\n     * \n     * @sign public this Crafty.removeEvent(Object ctx, HTMLElement obj, String event, Function callback)\n     * @param ctx - Context of the callback or the value of `this`\n     * @param obj - Element the event is on\n     * @param event - Name of the event\n     * @param callback - Method executed when triggered\n     *\n     * Removes events attached by `Crafty.addEvent()`. All parameters must\n     * be the same that were used to attach the event including a reference\n     * to the callback method.\n     *\n     * @see Crafty.addEvent\n     */\n    removeEvent: function (ctx, obj, type, callback) {\n        if (arguments.length === 3) {\n            callback = type;\n            type = obj;\n            obj = window.document;\n        }\n\n        //retrieve anonymous function\n        var id = ctx[0] || \"\",\n            afn = this._events[id + obj + type + callback];\n\n        if (afn) {\n            obj.removeEventListener(type, afn, false);\n            delete this._events[id + obj + type + callback];\n        }\n    },\n\n    /**@\n     * #Crafty.background\n     * @category Graphics, Stage\n     * @kind Method\n     * \n     * @sign public void Crafty.background(String style)\n     * @param style - Modify the background with a color or image\n     *\n     * This method is a shortcut for adding a background\n     * style to the stage element, i.e.\n     * `Crafty.stage.elem.style.background = ...`\n     * \n     * For example, if you want the background to be white,\n     * with an image in the center, you might use:\n     * ~~~\n     * Crafty.background('#FFFFFF url(landscape.png) no-repeat center center');\n     * ~~~\n     *  \n     */\n    background: function (style) {\n        Crafty.stage.elem.style.background = style;\n    }\n};\n"},"hash":"e8b936d94d44e0b51df1ed7e6198e4ab"}