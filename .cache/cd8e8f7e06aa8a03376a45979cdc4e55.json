{"dependencies":[{"name":"./setup","loc":{"line":1,"column":23}}],"generated":{"js":"\"use strict\";\n\nvar _setup = require(\"./setup\");\n\nvar Setup = _interopRequireWildcard(_setup);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// both players use the paddle component \nCrafty.c('Paddle', {\n  startPaddle({ up, down, x, y }) {\n    this.addComponent('2D, Canvas, Color, Keyboard, Bounded, Solid');\n    this.speed = Setup.scaleX(60);\n    this.w = Setup.scaleX(1.5);\n    this.h = Setup.scaleY(15);\n\n    // Used to determine what happens when the ball hits the paddle.\n    this.movingDir = 0;\n\n    // lexically scoped 'this' ref because the Crafty.js binding system seems to shadow regular es6 Function.prototype.bind?? call didn't work either.\n    let ctx = this;\n    this.bind('movePaddles', function (dt) {\n      // keyboard controls. \n      if (this.isDown(up)) {\n        ctx.y -= ctx.speed * (dt / 1000);\n        this.movingDir = -1;\n      } else if (this.isDown(down)) {\n        ctx.y += ctx.speed * (dt / 1000);\n        this.movingDir = 1;\n      } else {\n        this.movingDir = 0;\n      }\n      this.restrict.call(this);\n    });\n    this.place.call(this, x, y);\n  },\n  place(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n});"},"hash":"4ca2572986bcea41b10aaca905a61b48"}