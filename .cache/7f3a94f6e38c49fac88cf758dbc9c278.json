{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}},{"name":"fs","loc":{"line":6,"column":17}},{"name":"C:\\Users\\canno\\Documents\\Code\\parcel-crafty\\node_modules\\craftyjs\\src\\graphics\\shaders\\sprite.vert","includedInParent":true},{"name":"C:\\Users\\canno\\Documents\\Code\\parcel-crafty\\node_modules\\craftyjs\\src\\graphics\\shaders\\sprite.frag","includedInParent":true}],"generated":{"js":"var Crafty = require('../core/core.js');\n\n//\n// Define some variables required for webgl\nvar fs = require('fs');\n\nCrafty.defaultShader(\"Image\", new Crafty.WebGLShader(\"attribute vec2 aPosition;\\nattribute vec3 aOrientation;\\nattribute vec2 aLayer;\\nattribute vec2 aTextureCoord;\\n\\nvarying mediump vec3 vTextureCoord;\\n\\nuniform vec4 uViewport;\\nuniform mediump vec2 uTextureDimensions;\\n\\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\\n\\nvoid main() {\\n  vec2 pos = aPosition;\\n  vec2 entityOrigin = aOrientation.xy;\\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\\n  \\n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\\n  vTextureCoord = vec3(aTextureCoord, aLayer.y);\\n}\", \"varying mediump vec3 vTextureCoord;\\n  \\nuniform sampler2D uSampler;\\nuniform mediump vec2 uTextureDimensions;\\n\\nvoid main(void) {\\n  highp vec2 coord =   vTextureCoord.xy / uTextureDimensions;\\n  mediump vec4 base_color = texture2D(uSampler, coord);\\n  gl_FragColor = vec4(base_color.rgb*base_color.a*vTextureCoord.z, base_color.a*vTextureCoord.z);\\n}\", [{ name: \"aPosition\", width: 2 }, { name: \"aOrientation\", width: 3 }, { name: \"aLayer\", width: 2 }, { name: \"aTextureCoord\", width: 2 }], function (e, _entity) {\n  var pos = e.pos;\n  // Write texture coordinates\n  e.program.writeVector(\"aTextureCoord\", 0, 0, 0, pos._h, pos._w, 0, pos._w, pos._h);\n}));\n\n/**@\n * #Image\n * @category Graphics\n * @kind Component\n * \n * Draw an image with or without repeating (tiling).\n */\nCrafty.c(\"Image\", {\n  _repeat: \"repeat\",\n  ready: false,\n\n  init: function () {\n    this.bind(\"Draw\", this._drawImage);\n    this.bind(\"LayerAttached\", this._setupImage);\n  },\n\n  remove: function () {\n    this.unbind(\"LayerAttached\", this._setupImage);\n    this.unbind(\"Draw\", this._drawImage);\n  },\n\n  /**@\n   * #.image\n   * @comp Image\n   * @kind Method\n   * \n   * @trigger Invalidate - when the image is loaded\n   * @sign public this .image(String url[, String repeat])\n   * @param url - URL of the image\n   * @param repeat - If the image should be repeated to fill the entity.  This follows CSS syntax: (`\"no-repeat\", \"repeat\", \"repeat-x\", \"repeat-y\"`), but defaults to `no-repeat`.\n   *\n   * Draw the specified image.\n   *\n   * @note The default value of repeat is `no-repeat`, which is different than the standard CSS default\n   *\n   * If the width and height are `0` and repeat is set to `no-repeat` the width and\n   * height will automatically assume that of the image. This is an\n   * easy way to create an image without needing sprites.\n   *\n   * If set to `no-repeat` and given dimensions larger than that of the image,\n   * the exact appearance will depend on what renderer (WebGL, DOM, or Canvas) is used.\n   *\n   * @example\n   * Will default to no-repeat. Entity width and height will be set to the images width and height\n   * ~~~\n   * var ent = Crafty.e(\"2D, DOM, Image\").image(\"myimage.png\");\n   * ~~~\n   * Create a repeating background.\n   * ~~~\n   * var bg = Crafty.e(\"2D, DOM, Image\")\n   *              .attr({w: Crafty.viewport.width, h: Crafty.viewport.height})\n   *              .image(\"bg.png\", \"repeat\");\n   * ~~~\n   *\n   * @see Crafty.sprite\n   */\n  image: function (url, repeat) {\n    this.__image = url;\n    this._repeat = repeat || \"no-repeat\";\n\n    this.img = Crafty.asset(url);\n    if (!this.img) {\n      this.img = new Image();\n      Crafty.asset(url, this.img);\n      this.img.src = url;\n      var self = this;\n\n      this.img.onload = function () {\n        self._setupImage(self._drawLayer);\n      };\n    } else {\n      this._setupImage(this._drawLayer);\n    }\n\n    this.trigger(\"Invalidate\");\n\n    return this;\n  },\n\n  // called on image change or layer attachment\n  _setupImage: function (layer) {\n    if (!this.img || !layer) return;\n\n    if (layer.type === \"Canvas\") {\n      this._pattern = this._drawContext.createPattern(this.img, this._repeat);\n    } else if (layer.type === \"WebGL\") {\n      this._establishShader(\"image:\" + this.__image, Crafty.defaultShader(\"Image\"));\n      this.program.setTexture(this._drawLayer.makeTexture(this.__image, this.img, this._repeat !== \"no-repeat\"));\n    }\n\n    if (this._repeat === \"no-repeat\") {\n      this.w = this.w || this.img.width;\n      this.h = this.h || this.img.height;\n    }\n\n    this.ready = true;\n    this.trigger(\"Invalidate\");\n  },\n\n  _drawImage: function (e) {\n    if (e.type === \"canvas\") {\n      //skip if no image\n      if (!this.ready || !this._pattern) return;\n\n      var context = e.ctx;\n\n      context.fillStyle = this._pattern;\n\n      context.save();\n      context.translate(e.pos._x, e.pos._y);\n      context.fillRect(0, 0, e.pos._w, e.pos._h);\n      context.restore();\n    } else if (e.type === \"DOM\") {\n      if (this.__image) {\n        e.style.backgroundImage = \"url(\" + this.__image + \")\";\n        e.style.backgroundRepeat = this._repeat;\n      }\n    } else if (e.type === \"webgl\") {\n      e.program.draw(e, this);\n    }\n  }\n});"},"hash":"aec0bad5d6373b4e15de9870f1f0d2f8"}