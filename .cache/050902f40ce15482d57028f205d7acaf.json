{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js');\n\n\n/**@\n * #Crafty.log\n * @category Debug\n * @kind Method\n *\n * @sign Crafty.log( arguments )\n * @param arguments - arguments which are passed to `console.log`\n *\n * This is a simple wrapper for `console.log`.  You can disable logging messages by setting `Crafty.loggingEnabled` to false.\n * It is recommended to use `Crafty.log`, as `console.log` can crash on IE9.\n */\n/**@\n * #Crafty.error\n * @category Debug\n * @kind Method\n *\n * @sign Crafty.error( arguments )\n * @param arguments - arguments which are passed to `console.error`\n *\n * This is a simple wrapper for `console.error`.  You can disable logging messages by setting `Crafty.loggingEnabled` to false.\n * It is recommended to use `Crafty.error`, as `console.error` can crash on IE9.\n */\nCrafty.extend({\n\t// Allow logging to be disabled\n\tloggingEnabled: true,\n\t// In some cases console.log doesn't exist, so provide a wrapper for it\n\tlog: function() {\n\t\tif (Crafty.loggingEnabled && (typeof window !== \"undefined\" ? window.console : console) && console.log) {\n\t\t\tconsole.log.apply(console, arguments);\n\t\t}\n\t},\n\terror: function() {\n\t\tif (Crafty.loggingEnabled && (typeof window !== \"undefined\" ? window.console : console) && console.error) {\n\t\t\tconsole.error.apply(console, arguments);\n\t\t}\n\t}\n});"},"hash":"1eda3aaac7774c1341d07255f9445019"}