{"dependencies":[{"name":"./version","loc":{"line":1,"column":22}}],"generated":{"js":"var version = require('./version');\n\n\n/**@\n * #Crafty\n * @category Core\n * @kind CoreObject\n *\n * `Crafty` is both an object, and a function for selecting entities.\n * Its many methods and properties are discussed individually.\n * Below is the documentation for use as a selector.\n *\n * @sign public EntitySelection Crafty( String selector)\n * @param selector - A string representing which entities to select\n *\n * @sign public Entity Crafty( Number selector )\n * @param selector - An entity's id\n *\n * Select a set of or single entities by components or an entity's ID.\n *\n * Crafty uses syntax similar to jQuery by having a selector engine to select entities by their components.\n *\n * If there is more than one match, the return value is an Array-like object listing the ID numbers of each matching entity. If there is exactly one match, the entity itself is returned. If you're not sure how many matches to expect, check the number of matches via Crafty(...).length. Alternatively, use Crafty(...).each(...), which works in all cases.\n *\n * @note You can treat an entity as if it was a selection of length 1 -- it implements all the same methods.\n *\n * @example\n * ~~~\n *    Crafty(\"MyComponent\")\n *    Crafty(\"Hello 2D Component\")\n *    Crafty(\"Hello, 2D, Component\")\n * ~~~\n *\n * The first selector will return all entities that have the component `MyComponent`. The second will return all entities that have `Hello` and `2D` and `Component` whereas the last will return all entities that have at least one of those components (or).\n *\n * ~~~\n *   Crafty(\"*\")\n * ~~~\n * Passing `*` will select all entities.\n *\n * ~~~\n *   Crafty(1)\n * ~~~\n * Passing an integer will select the entity with that `ID`.\n *\n * To work directly with an array of entities, use the `get()` method on a selection.\n * To call a function in the context of each entity, use the `.each()` method.\n *\n * The event related methods such as `bind` and `trigger` will work on selections of entities.\n *\n * @see Crafty Core#.get\n * @see Crafty Core#.each\n */\n\nvar Crafty = function (selector) {\n    return new Crafty.fn.init(selector);\n};\n    // Internal variables\nvar GUID, frame, components, entities, handlers, onloads,\nslice, rlist, rspace;\n\n\ncomponents  = {}; // Map of components and their functions\nslice       = Array.prototype.slice;\nrlist       = /\\s*,\\s*/;\nrspace      = /\\s+/;\n\nvar initState = function () {\n    GUID        = 1; // GUID for entity IDs\n    frame       = 0;\n\n    entities    = {}; // Map of entities and their data\n    handlers    = {}; // Global event handlers\n    onloads     = []; // Temporary storage of onload handlers\n};\n\ninitState();\n\n/**@\n * #Crafty Core\n * @category Core\n * @kind CoreObject\n * \n * @trigger NewEntityName - After setting new name for entity - String - entity name\n * @trigger NewComponent - when a new component is added to the entity - String - Component\n * @trigger RemoveComponent - when a component is removed from the entity - String - Component\n * @trigger Remove - when the entity is removed by calling .destroy()\n *\n * A set of methods added to every single entity.\n */\nCrafty.fn = Crafty.prototype = {\n\n    init: function (selector) {\n        //select entities by component\n        if (typeof selector === \"string\") {\n            var elem = 0, //index elements\n                e, //entity forEach\n                current,\n                and = false, //flags for multiple\n                or = false,\n                del,\n                comps,\n                score,\n                i, l;\n\n            if (selector === '*') {\n                i = 0;\n                for (e in entities) {\n                    // entities is something like {2:entity2, 3:entity3, 11:entity11, ...}\n                    // The for...in loop sets e to \"2\", \"3\", \"11\", ... i.e. all\n                    // the entity ID numbers. e is a string, so +e converts to number type.\n                    this[i] = +e;\n                    i++;\n                }\n                this.length = i;\n                // if there's only one entity, return the actual entity\n                if (i === 1) {\n                    return entities[this[0]];\n                }\n                return this;\n            }\n\n            //multiple components OR\n            if (selector.indexOf(',') !== -1) {\n                or = true;\n                del = rlist;\n                //deal with multiple components AND\n            } else if (selector.indexOf(' ') !== -1) {\n                and = true;\n                del = rspace;\n            }\n\n            //loop over entities\n            for (e in entities) {\n                if (!entities.hasOwnProperty(e)) continue; //skip\n                current = entities[e];\n\n                if (and || or) { //multiple components\n                    comps = selector.split(del);\n                    i = 0;\n                    l = comps.length;\n                    score = 0;\n\n                    for (; i < l; i++) //loop over components\n                        if (current.__c[comps[i]]) score++; //if component exists add to score\n\n                        //if anded comps and has all OR ored comps and at least 1\n                    if (and && score === l || or && score > 0) this[elem++] = +e;\n\n                } else if (current.__c[selector]) this[elem++] = +e; //convert to int\n            }\n\n            //extend all common components\n            if (elem > 0 && !and && !or) this.extend(components[selector]);\n            if (comps && and)\n                for (i = 0; i < l; i++) this.extend(components[comps[i]]);\n\n            this.length = elem; //length is the last index (already incremented)\n\n            // if there's only one entity, return the actual entity\n            if (elem === 1) {\n                return entities[this[elem - 1]];\n            }\n\n        } else { //Select a specific entity\n\n            if (!selector) { //nothin passed creates God entity\n                selector = 0;\n                if (!(selector in entities)) entities[selector] = this;\n            }\n\n            //if not exists, return undefined\n            if (!(selector in entities)) {\n                this.length = 0;\n                return this;\n            }\n\n            this[0] = selector;\n            this.length = 1;\n\n            //update from the cache\n            if (!this.__c) this.__c = {};\n            if (!this._callbacks) Crafty._addCallbackMethods(this);\n\n            //update to the cache if NULL\n            if (!entities[selector]) entities[selector] = this;\n            return entities[selector]; //return the cached selector\n        }\n\n        Crafty._addCallbackMethods(this);\n        return this;\n    },\n\n    /**@\n     * #.setName\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .setName(String name)\n     * @param name - A human readable name for debugging purposes.\n     *\n     * Set a human readable name for debugging purposes.\n     *\n     * @example\n     * ~~~\n     * var ent = Crafty.e().setName(\"Player\");\n     * ~~~\n     *\n     * @see Crafty Core#.getName\n     */\n    setName: function (name) {\n        var entityName = String(name);\n        this._entityName = entityName;\n        this.trigger(\"NewEntityName\", entityName);\n        return this;\n    },\n\n    /**@\n     * #.getName\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .getName(String name)\n     * @returns A human readable name for debugging purposes.\n     *\n     * Get the human readable name for debugging purposes.\n     *\n     * @example\n     * ~~~\n     * var ent = Crafty.e().setName(\"Player\");\n     * var name = ent.getName();\n     * ~~~\n     *\n     * @see Crafty Core#.setName\n     */\n    getName: function (name) {\n        return this._entityName;\n    },\n\n    /**@\n     * #.addComponent\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .addComponent(String componentList)\n     * @param componentList - A string of components to add separated by a comma `,`\n     * @sign public this .addComponent(String Component1[, .., String ComponentN])\n     * @param Component# - Component ID to add.\n     *\n     * Adds a component to the selected entities or entity.\n     *\n     * Components are used to extend the functionality of entities.\n     * This means it will copy properties and assign methods to\n     * augment the functionality of the entity.\n     *\n     * For adding multiple components, you can either pass a string with\n     * all the component names (separated by commas), or pass each component name as\n     * an argument.\n     *\n     * If the component has a function named `init` it will be called.\n     *\n     * If the entity already has the component, the component is skipped (nothing happens).\n     *\n     * @example\n     * ~~~\n     * this.addComponent(\"2D, Canvas\");\n     * this.addComponent(\"2D\", \"Canvas\");\n     * ~~~\n     */\n    addComponent: function (id) {\n        var comps,\n            comp, c = 0;\n\n        //add multiple arguments\n        if (arguments.length === 1 && id.indexOf(',') !== -1) {\n            comps = id.split(rlist);\n        } else {\n            comps = arguments;\n        }\n\n        //extend the components\n        for (; c < comps.length; c++) {\n            // If component already exists, continue\n            if (this.__c[comps[c]] === true) {\n                continue;\n            }\n            this.__c[comps[c]] = true;\n            comp = components[comps[c]];\n            // Copy all methods of the component\n            this.extend(comp);\n            // Add any required components\n            if (comp && \"required\" in comp) {\n                this.requires( comp.required );\n            }\n            // Call constructor function\n            if (comp && \"init\" in comp) {\n                comp.init.call(this);\n            }\n            // Bind events\n            if (comp && \"events\" in comp){\n                var auto = comp.events;\n                for (var eventName in auto){\n                    var fn = typeof auto[eventName] === \"function\" ? auto[eventName] : comp[auto[eventName]];\n                    this.bind(eventName, fn);\n                }\n            }\n        }\n\n        this.trigger(\"NewComponent\", comps);\n        return this;\n    },\n\n    /**@\n     * #.toggleComponent\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .toggleComponent(String ComponentList)\n     * @param ComponentList - A string of components to add or remove separated by a comma `,`\n     * @sign public this .toggleComponent(String Component1[, .., String componentN])\n     * @param Component# - Component ID to add or remove.\n     * \n     * Add or Remove Components from an entity.\n     *\n     * @example\n     * ~~~\n     * var e = Crafty.e(\"2D,DOM,Test\");\n     * e.toggleComponent(\"Test,Test2\"); //Remove Test, add Test2\n     * e.toggleComponent(\"Test,Test2\"); //Add Test, remove Test2\n     * ~~~\n     *\n     * ~~~\n     * var e = Crafty.e(\"2D,DOM,Test\");\n     * e.toggleComponent(\"Test\",\"Test2\"); //Remove Test, add Test2\n     * e.toggleComponent(\"Test\",\"Test2\"); //Add Test, remove Test2\n     * e.toggleComponent(\"Test\");         //Remove Test\n     * ~~~\n     */\n    toggleComponent: function (toggle) {\n        var i = 0,\n            l, comps;\n        if (arguments.length > 1) {\n            l = arguments.length;\n\n            for (; i < l; i++) {\n                if (this.has(arguments[i])) {\n                    this.removeComponent(arguments[i]);\n                } else {\n                    this.addComponent(arguments[i]);\n                }\n            }\n            //split components if contains comma\n        } else if (toggle.indexOf(',') !== -1) {\n            comps = toggle.split(rlist);\n            l = comps.length;\n            for (; i < l; i++) {\n                if (this.has(comps[i])) {\n                    this.removeComponent(comps[i]);\n                } else {\n                    this.addComponent(comps[i]);\n                }\n            }\n\n            //single component passed\n        } else {\n            if (this.has(toggle)) {\n                this.removeComponent(toggle);\n            } else {\n                this.addComponent(toggle);\n            }\n        }\n\n        return this;\n    },\n\n    /**@\n     * #.requires\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .requires(String componentList)\n     * @param componentList - List of components that must be added\n     *\n     * Makes sure the entity has the components listed. If the entity does not\n     * have the component, it will add it.\n     *\n     * (In the current version of Crafty, this function behaves exactly the same\n     * as `addComponent`. By convention, developers have used `requires` for\n     * component dependencies -- i.e. to indicate specifically that one component\n     * will only work properly if another component is present -- and used\n     * `addComponent` in all other situations.)\n     *\n     * @see .addComponent\n     */\n    requires: function (list) {\n        return this.addComponent(list);\n    },\n\n    /**@\n     * #.removeComponent\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .removeComponent(String Component[, soft])\n     * @param component - Component to remove\n     * @param soft - Whether to soft remove it (defaults to `true`)\n     *\n     * Removes a component from an entity. A soft remove (the default) will only\n     * refrain `.has()` from returning true. Hard will remove all\n     * associated properties and methods.\n     *\n     * @example\n     * ~~~\n     * var e = Crafty.e(\"2D,DOM,Test\");\n     * e.removeComponent(\"Test\");        //Soft remove Test component\n     * e.removeComponent(\"Test\", false); //Hard remove Test component\n     * ~~~\n     */\n    removeComponent: function (id, soft) {\n        var comp = components[id];\n        this.trigger(\"RemoveComponent\", id);\n        if (comp && \"events\" in comp){\n            var auto = comp.events;\n            for (var eventName in auto){\n                var fn = typeof auto[eventName] === \"function\" ? auto[eventName] : comp[auto[eventName]];\n                this.unbind(eventName, fn);\n            }\n        }\n        if (comp && \"remove\" in comp) {\n            comp.remove.call(this, false);\n        }\n        if (soft === false && comp) {\n            for (var prop in comp) {\n                delete this[prop];\n            }\n        }\n        delete this.__c[id];\n\n\n        return this;\n    },\n\n    /**@\n     * #.getId\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public Number .getId(void)\n     * @returns the ID of this entity.\n     *\n     * For better performance, simply use the this[0] property.\n     *\n     * @example\n     * Finding out the `ID` of an entity can be done by returning the property `0`.\n     * ~~~\n     *    var ent = Crafty.e(\"2D\");\n     *    ent[0]; //ID\n     *    ent.getId(); //also ID\n     * ~~~\n     */\n    getId: function () {\n        return this[0];\n    },\n\n    /**@\n     * #.has\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public Boolean .has(String component)\n     * @param component - The name of the component to check\n     * @returns `true` or `false` depending on if the\n     * entity has the given component.\n     *\n     * For better performance, simply use the `.__c` object\n     * which will be `true` if the entity has the component or\n     * will not exist (or be `false`).\n     */\n    has: function (id) {\n        return !!this.__c[id];\n    },\n\n    /**@\n     * #.attr\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @trigger Change - when properties change - {key: value}\n     *\n     * @sign public this .attr(String property, Any value[, Boolean silent[, Boolean recursive]])\n     * @param property - Property of the entity to modify\n     * @param value - Value to set the property to\n     * @param silent - If you would like to supress events\n     * @param recursive - If you would like merge recursively\n     *\n     * Use this method to set any property of the entity.\n     *\n     * @sign public this .attr(Object map[, Boolean silent[, Boolean recursive]])\n     * @param map - Object where each key is the property to modify and the value as the property value\n     * @param silent - If you would like to supress events\n     * @param recursive - If you would like merge recursively\n     *\n     * Use this method to set multiple properties of the entity.\n     *\n     * Setter options:\n     * - `silent`: If you want to prevent it from firing events.\n     * - `recursive`: If you pass in an object you could overwrite sibling keys, this recursively merges instead of just merging it. This is `false` by default, unless you are using dot notation `name.first`.\n     *\n     * @sign public Any .attr(String property)\n     * @param property - Property of the entity to modify\n     * @returns Value - the value of the property\n     *\n     * Use this method to get any property of the entity. You can also retrieve the property using `this.property`.\n     * \n     *\n     * @example\n     * ~~~\n     * this.attr({key: \"value\", prop: 5});\n     * this.attr(\"key\"); // returns \"value\"\n     * this.attr(\"prop\"); // returns 5\n     * this.key; // \"value\"\n     * this.prop; // 5\n     *\n     * this.attr(\"key\", \"newvalue\");\n     * this.attr(\"key\"); // returns \"newvalue\"\n     * this.key; // \"newvalue\"\n     *\n     * this.attr(\"parent.child\", \"newvalue\");\n     * this.parent; // {child: \"newvalue\"};\n     * this.attr('parent.child'); // \"newvalue\"\n     * ~~~\n     */\n    attr: function (key, value, silent, recursive) {\n        if (arguments.length === 1 && typeof arguments[0] === 'string') {\n            return this._attr_get(key);\n        } else {\n            return this._attr_set(key, value, silent, recursive);\n        }\n    },\n\n    /**\n     * Internal getter method for data on the entity. Called by `.attr`.\n     *\n     * example\n     * ~~~\n     * person._attr_get('name'); // Foxxy\n     * person._attr_get('contact'); // {email: 'fox_at_example.com'}\n     * person._attr_get('contact.email'); // fox_at_example.com\n     * ~~~\n     */\n    _attr_get: function(key, context) {\n        var first, keys, subkey;\n        if (typeof context === \"undefined\" || context === null) {\n            context = this;\n        }\n        if (key.indexOf('.') > -1) {\n            keys = key.split('.');\n            first = keys.shift();\n            subkey = keys.join('.');\n            return this._attr_get(keys.join('.'), context[first]);\n        } else {\n            return context[key];\n        }\n    },\n\n    /**\n     * Internal setter method for attributes on the component. Called by `.attr`.\n     *\n     * Options:\n     *\n     * `silent`: If you want to prevent it from firing events.\n     *\n     * `recursive`: If you pass in an object you could overwrite\n     * sibling keys, this recursively merges instead of just\n     * merging it. This is `false` by default, unless you are\n     * using dot notation `name.first`.\n     *\n     * example\n     * ~~~\n     * person._attr_set('name', 'Foxxy', true);\n     * person._attr_set('name', 'Foxxy');\n     * person._attr_set({name: 'Foxxy'}, true);\n     * person._attr_set({name: 'Foxxy'});\n     * person._attr_set('name.first', 'Foxxy');\n     * ~~~\n     */\n    _attr_set: function() {\n        var data, silent, recursive;\n        if (typeof arguments[0] === 'string') {\n            data = this._set_create_object(arguments[0], arguments[1]);\n            silent = !!arguments[2];\n            recursive = arguments[3] || arguments[0].indexOf('.') > -1;\n        } else {\n            data = arguments[0];\n            silent = !!arguments[1];\n            recursive = !!arguments[2];\n        }\n\n        if (!silent) {\n            this.trigger('Change', data);\n        }\n\n        if (recursive) {\n            this._recursive_extend(data, this);\n        } else {\n            this.extend.call(this, data);\n        }\n        return this;\n    },\n\n    /**\n     * If you are setting a key of 'foo.bar' or 'bar', this creates\n     * the appropriate object for you to recursively merge with the\n     * current attributes.\n     */\n    _set_create_object: function(key, value) {\n        var data = {}, keys, first, subkey;\n        if (key.indexOf('.') > -1) {\n            keys = key.split('.');\n            first = keys.shift();\n            subkey = keys.join('.');\n            data[first] = this._set_create_object(subkey, value);\n        } else {\n            data[key] = value;\n        }\n        return data;\n    },\n\n    /**\n     * Recursively puts `new_data` into `original_data`.\n     */\n    _recursive_extend: function(new_data, original_data) {\n        var key;\n        for (key in new_data) {\n            if (new_data[key].constructor === Object) {\n                original_data[key] = this._recursive_extend(new_data[key], original_data[key]);\n            } else {\n                original_data[key] = new_data[key];\n            }\n        }\n        return original_data;\n    },\n\n    /**@\n     * #.toArray\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .toArray(void)\n     *\n     * This method will simply return the found entities as an array of ids.  To get an array of the actual entities, use `get()`.\n     * @see .get\n     */\n    toArray: function () {\n        return slice.call(this, 0);\n    },\n\n    /**@\n    * #.timeout\n    * @comp Crafty Core\n    * @kind Method\n\n    * @sign public this .timeout(Function callback, Number delay)\n    * @param callback - Method to execute after given amount of milliseconds\n    * @param delay - Amount of milliseconds to execute the method\n    *\n    * The delay method will execute a function after a given amount of time in milliseconds.\n    *\n    * Essentially a wrapper for `setTimeout`.\n    *\n    * @example\n    * Destroy itself after 100 milliseconds\n    * ~~~\n    * this.timeout(function() {\n         this.destroy();\n    * }, 100);\n    * ~~~\n    */\n    timeout: function (callback, duration) {\n        this.each(function () {\n            var self = this;\n            setTimeout(function () {\n                callback.call(self);\n            }, duration);\n        });\n        return this;\n    },\n\n    /**@\n     * #.bind\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .bind(String eventName, Function callback)\n     * @param eventName - Name of the event to bind to\n     * @param callback - Method to execute when the event is triggered\n     *\n     * Attach the current entity (or entities) to listen for an event.\n     *\n     * Callback will be invoked when an event with the event name passed\n     * is triggered. Depending on the event, some data may be passed\n     * via an argument to the callback function.\n     *\n     * The first argument is the event name (can be anything) whilst the\n     * second argument is the callback. If the event has data, the\n     * callback should have an argument.\n     *\n     * Events are arbitrary and provide communication between components.\n     * You can trigger or bind an event even if it doesn't exist yet.\n     *\n     * Unlike DOM events, Crafty events are executed synchronously.\n     *\n     * @example\n     * ~~~\n     * this.attr(\"triggers\", 0); //set a trigger count\n     * this.bind(\"myevent\", function() {\n     *     this.triggers++; //whenever myevent is triggered, increment\n     * });\n     * this.bind(\"EnterFrame\", function() {\n     *     this.trigger(\"myevent\"); //trigger myevent on every frame\n     * });\n     * ~~~\n     *\n     * @see .trigger, .unbind\n     */\n    bind: function (event, callback) {\n        //  To learn how the event system functions, see the comments for Crafty._callbackMethods\n        //optimization for 1 entity\n        if (this.length === 1) {\n            this._bindCallback(event, callback);\n        } else {\n            for (var i = 0; i < this.length; i++) {\n                var e = entities[this[i]];\n                if (e) {\n                    e._bindCallback(event, callback);\n                }\n            }\n        }\n        return this;\n    },\n\n    /**@\n     * #.uniqueBind\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public Number .uniqueBind(String eventName, Function callback)\n     * @param eventName - Name of the event to bind to\n     * @param callback - Method to execute upon event triggered\n     * @returns ID of the current callback used to unbind\n     *\n     * Works like Crafty.bind, but prevents a callback from being bound multiple times.\n     *\n     * @see .bind\n     */\n    uniqueBind: function (event, callback) {\n        this.unbind(event, callback);\n        this.bind(event, callback);\n\n    },\n\n    /**@\n     * #.one\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public Number one(String eventName, Function callback)\n     * @param eventName - Name of the event to bind to\n     * @param callback - Method to execute upon event triggered\n     * @returns ID of the current callback used to unbind\n     *\n     * Works like Crafty.bind, but will be unbound once the event triggers.\n     *\n     * @see .bind\n     */\n    one: function (event, callback) {\n        var self = this;\n        var oneHandler = function (data) {\n            callback.call(self, data);\n            self.unbind(event, oneHandler);\n        };\n        return self.bind(event, oneHandler);\n\n    },\n\n    /**@\n     * #.unbind\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .unbind(String eventName[, Function callback])\n     * @param eventName - Name of the event to unbind\n     * @param callback - Function to unbind\n     *\n     * Removes binding with an event from current entity.\n     *\n     * Passing an event name will remove all events bound to\n     * that event. Passing a reference to the callback will\n     * unbind only that callback.\n     * @see .bind, .trigger\n     */\n    unbind: function (event, callback) {\n        //  To learn how the event system functions, see the comments for Crafty._callbackMethods\n        var i, e;\n        for (i = 0; i < this.length; i++) {\n            e = entities[this[i]];\n            if (e) {\n                e._unbindCallbacks(event, callback);\n            }\n        }\n        return this;\n    },\n\n    /**@\n     * #.trigger\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .trigger(String eventName[, Object data])\n     * @param eventName - Event to trigger\n     * @param data - Arbitrary data that will be passed into every callback as an argument\n     *\n     * Trigger an event with arbitrary data. Will invoke all callbacks with\n     * the context (value of `this`) of the current entity object.\n     *\n     * *Note: This will only execute callbacks within the current entity, no other entity.*\n     *\n     * The first argument is the event name to trigger and the optional\n     * second argument is the arbitrary event data. This can be absolutely anything.\n     *\n     * Unlike DOM events, Crafty events are executed synchronously.\n     */\n    trigger: function (event, data) {\n        //  To learn how the event system functions, see the comments for Crafty._callbackMethods\n        if (this.length === 1) {\n            //find the handlers assigned to the entity\n            this._runCallbacks(event, data);\n         } else {\n            for (var i = 0; i < this.length; i++) {\n                var e = entities[this[i]];\n                if (e) {\n                    e._runCallbacks(event, data);\n                }\n            }\n        }\n        return this;\n    },\n\n    /**@\n     * #.each\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .each(Function method)\n     * @param method - Method to call on each iteration\n     *\n     * Iterates over found entities, calling a function for every entity.\n     *\n     * The function will be called for every entity and will pass the index\n     * in the iteration as an argument. The context (value of `this`) of the\n     * function will be the current entity in the iteration.\n     *\n     * @example\n     * Destroy every second 2D entity\n     * ~~~\n     * Crafty(\"2D\").each(function(i) {\n     *     if(i % 2 === 0) {\n     *         this.destroy();\n     *     }\n     * });\n     * ~~~\n     */\n    each: function (func) {\n        var i = 0,\n            l = this.length;\n        for (; i < l; i++) {\n            //skip if not exists\n            if (!entities[this[i]]) continue;\n            func.call(entities[this[i]], i);\n        }\n        return this;\n    },\n\n    /**@\n     * #.get\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public Array .get()\n     * @returns An array of entities corresponding to the active selector\n     *\n     * @sign public Entity .get(Number index)\n     * @returns an entity belonging to the current selection\n     * @param index - The index of the entity to return.  If negative, counts back from the end of the array.\n     *\n     *\n     * @example\n     * Get an array containing every \"2D\" entity\n     * ~~~\n     * var arr = Crafty(\"2D\").get()\n     * ~~~\n     * Get the first entity matching the selector\n     * ~~~\n     * // equivalent to Crafty(\"2D\").get()[0], but doesn't create a new array\n     * var e = Crafty(\"2D\").get(0)\n     * ~~~\n     * Get the last \"2D\" entity matching the selector\n     * ~~~\n     * var e = Crafty(\"2D\").get(-1)\n     * ~~~\n     *\n     */\n    get: function(index) {\n        var l = this.length;\n        if (typeof index !== \"undefined\") {\n            if (index >= l || index+l < 0)\n                return undefined;\n            if (index>=0)\n                return entities[this[index]];\n            else\n                return entities[this[index+l]];\n        } else {\n            var i=0, result = [];\n            for (; i < l; i++) {\n                //skip if not exists\n                if (!entities[this[i]]) continue;\n                result.push( entities[this[i]] );\n            }\n            return result;\n        }\n    },\n\n    /**@\n     * #.clone\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public Entity .clone(void)\n     * @returns Cloned entity of the current entity\n     *\n     * Method will create another entity with the exact same\n     * properties, components and methods as the current entity.\n     */\n    clone: function () {\n        var comps = this.__c,\n            comp,\n            prop,\n            clone = Crafty.e();\n\n        for (comp in comps) {\n            clone.addComponent(comp);\n        }\n        for (prop in this) {\n            if (prop !== \"0\" && prop !== \"_global\" && prop !== \"_changed\" && typeof this[prop] !== \"function\" && typeof this[prop] !== \"object\") {\n                clone[prop] = this[prop];\n            }\n        }\n\n        return clone;\n    },\n\n\n    /**@\n     * #.setter\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .setter(String property, Function callback)\n     * @param property - Property to watch for modification\n     * @param callback - Method to execute if the property is modified\n     *\n     * Will watch a property waiting for modification and will then invoke the\n     * given callback when attempting to modify.\n     *\n     * This feature is deprecated; use .defineField() instead.\n     * @see .defineField\n     */\n    setter: function (prop, callback) {\n        return this.defineField(prop, function(){}, callback);\n    },\n\n    /**@\n     * #.defineField\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .defineField(String property, Function getCallback, Function setCallback)\n     * @param property - Property name to assign getter & setter to\n     * @param getCallback - Method to execute if the property is accessed\n     * @param setCallback - Method to execute if the property is mutated\n     *\n     * Assigns getters and setters to the property. \n     * A getter will watch a property waiting for access and will then invoke the\n     * given getCallback when attempting to retrieve.\n     * A setter will watch a property waiting for mutation and will then invoke the\n     * given setCallback when attempting to modify.\n     *\n     * @example\n     * ~~~\n     * var ent = Crafty.e(\"2D\");\n     * ent.defineField(\"customData\", function() { \n     *    return this._customData; \n     * }, function(newValue) { \n     *    this._customData = newValue;\n     * });\n     *\n     * ent.customData = \"2\" // set customData to 2\n     * Crafty.log(ent.customData) // prints 2\n     * ~~~\n     */\n    defineField: function (prop, getCallback, setCallback) {\n        Crafty.defineField(this, prop, getCallback, setCallback);\n        return this;\n    },\n\n    /**@\n     * #.destroy\n     * @comp Crafty Core\n     * @kind Method\n     * \n     * @sign public this .destroy(void)\n     * Will remove all event listeners and delete all properties as well as removing from the stage\n     */\n    destroy: function () {\n        //remove all event handlers, delete from entities\n        this.each(function () {\n            var comp;\n            this.trigger(\"Remove\");\n            for (var compName in this.__c) {\n                comp = components[compName];\n                if (comp && \"remove\" in comp)\n                    comp.remove.call(this, true);\n            }\n            this._unbindAll();\n            delete entities[this[0]];\n        });\n    }\n};\n\n//give the init instances the Crafty prototype\nCrafty.fn.init.prototype = Crafty.fn;\n\n\n/**@\n * #Crafty.extend\n * @category Core\n * @kind Method\n * \n * @sign public this Crafty.extend(Object obj)\n * @param obj - An object whose fields will be copied onto Crafty.  This is a shallow copy.\n *\n * Used to extend the Crafty namespace by passing in an object of properties and methods to add.\n *\n * @example\n * ~~~ * \n * Crafty.extend({\n *   isArray: function(arg){\n *     return Object.prototype.toString.call(arg) === '[object Array]'\n *   }\n * });\n * \n * Crafty.isArray([4, 5, 6]);  // returns true\n * Crafty.isArray('hi');       // returns false\n * ~~~\n */\nCrafty.extend = Crafty.fn.extend = function (obj) {\n    var target = this,\n        key;\n\n    //don't bother with nulls\n    if (!obj) return target;\n\n    for (key in obj) {\n        if (target === obj[key]) continue; //handle circular reference\n        target[key] = obj[key];\n    }\n\n    return target;\n};\n\n\n\n\n// How Crafty handles events and callbacks\n// -----------------------------------------\n// Callbacks are stored in the global object `handlers`, which has properties for each event.  \n// These properties point to an object which has a property for each entity listening to the event.\n// These in turn are arrays containing the callbacks to be triggered.\n// \n// Here is an example of what \"handlers\" can look like:\n//     handlers ===\n//         { Move:  {5:[fnA], 6:[fnB, fnC], global:[fnD]},\n//         Change: {6:[fnE]}\n//         }\n// In this example, when the 'Move' event is triggered on entity #6 (e.g.\n// entity6.trigger('Move')), it causes the execution of fnB() and fnC(). When\n// the Move event is triggered globally (i.e. Crafty.trigger('Move')), it\n// will execute fnA, fnB, fnC, fnD.\n//\n// In this example, \"this\" is bound to entity #6 whenever fnB() is executed, and\n// \"this\" is bound to Crafty whenever fnD() is executed.\n//\n// In other words, the structure of \"handlers\" is:\n//\n//     handlers[event][objID] === (Array of callback functions)\n//\n// In addition to the global object, each object participating in the event system has a `_callbacks` property \n// which lists the events that object is listening to.  It allows access to the object's callbacks like this:\n//     obj._callbacks[event] === (Array of callback functions)\n//\n// Objects, which can listen to events (or collections of such objects) have varying logic \n// on how the events are bound/triggered/unbound.  Since the underlying operations on the callback array are the same,\n// the single-object operations are implemented in the following object.  \n// Calling `Crafty._addCallbackMethods(obj)` on an object will extend that object with these methods.\n\n\n \nCrafty._callbackMethods = {\n    // Add a function to the list of callbacks for an event\n    _bindCallback: function(event, fn) {\n        // Get handle to event, creating it if necessary\n        var callbacks = this._callbacks[event];\n        if (!callbacks) {\n            callbacks = this._callbacks[event] = ( handlers[event] || ( handlers[event] = {} ) )[this[0]] = [];\n            callbacks.context = this;\n            callbacks.depth = 0;\n        }\n        // Push to callback array\n        callbacks.push(fn);\n    },\n\n    // Process for running all callbacks for the given event\n    _runCallbacks: function(event, data) {\n        if (!this._callbacks[event]) {\n            return;\n        }\n        var callbacks = this._callbacks[event];\n\n        // Callback loop; deletes dead callbacks, but only when it is safe to do so\n        var i, l = callbacks.length;\n        // callbacks.depth tracks whether this function was invoked in the middle of a previous iteration through the same callback array\n        callbacks.depth++;\n        for (i = 0; i < l; i++) {\n            if (typeof callbacks[i] === \"undefined\") {\n                if (callbacks.depth <= 1) {\n                    callbacks.splice(i, 1);\n                    i--;\n                    l--;\n                    // Delete callbacks object if there are no remaining bound events\n                    if (callbacks.length === 0) {\n                        delete this._callbacks[event];\n                        delete handlers[event][this[0]];\n                    }\n                }\n            } else {\n                callbacks[i].call(this, data);\n            }\n        }\n        callbacks.depth--;\n    },\n\n    // Unbind callbacks for the given event\n    // If fn is specified, only it will be removed; otherwise all callbacks will be\n    _unbindCallbacks: function(event, fn) {\n        if (!this._callbacks[event]) {\n            return;\n        }\n        var callbacks = this._callbacks[event];\n        // Iterate through and delete the callback functions that match\n        // They are spliced out when _runCallbacks is invoked, not here\n        // (This function might be called in the middle of a callback, which complicates the logic)\n        for (var i = 0; i < callbacks.length; i++) {\n            if (!fn || callbacks[i] === fn) {\n                delete callbacks[i];\n            }\n        }\n    },\n\n    // Completely all callbacks for every event, such as on object destruction\n    _unbindAll: function() {\n        if (!this._callbacks) return;\n        for (var event in this._callbacks) {\n            if (this._callbacks[event]) {\n                // Remove the normal way, in case we've got a nested loop\n                this._unbindCallbacks(event);\n                // Also completely delete the registered callback from handlers\n                delete handlers[event][this[0]];\n            }\n        }\n    }\n};\n\n// Helper function to add the callback methods above to an object, as well as initializing the callbacks object\n// it provies the \"low level\" operations; bind, unbind, and trigger will still need to be implemented for that object\nCrafty._addCallbackMethods = function(context) {\n    context.extend(Crafty._callbackMethods);\n    context._callbacks = {};\n};\n\nCrafty._addCallbackMethods(Crafty);\n\nCrafty.extend({\n    // Define Crafty's id\n    0: \"global\",\n    /**@\n     * #Crafty.init\n     * @category Core\n     * @kind Method\n     * \n     * @trigger Load - Just after the viewport is initialised. Before the EnterFrame loops is started\n     * @sign public this Crafty.init([Number width, Number height, String stage_elem])\n     * @sign public this Crafty.init([Number width, Number height, HTMLElement stage_elem])\n     * @param Number width - Width of the stage\n     * @param Number height - Height of the stage\n     * @param String or HTMLElement stage_elem - the element to use for the stage\n     *\n     * Sets the element to use as the stage, creating it if necessary.  By default a div with id 'cr-stage' is used, but if the 'stage_elem' argument is provided that will be used instead.  (see `Crafty.viewport.init`)\n     *\n     * Starts the `EnterFrame` interval. This will call the `EnterFrame` event for every frame.\n     *\n     * Can pass width and height values for the stage otherwise will default to window size.\n     *\n     * All `Load` events will be executed.\n     *\n     * Uses `requestAnimationFrame` to sync the drawing with the browser but will default to `setInterval` if the browser does not support it.\n     * @see Crafty.stop,  Crafty.viewport\n     */\n    init: function (w, h, stage_elem) {\n        \n        // If necessary, attach any event handlers registered before Crafty started\n        if (!this._preBindDone) {\n            for(var i = 0; i < this._bindOnInit.length; i++) {\n\n                var preBind = this._bindOnInit[i];\n                Crafty.bind(preBind.event, preBind.handler);\n            }\n        }\n\n        // The viewport will init things like the default graphics layers as well\n        Crafty.viewport.init(w, h, stage_elem);\n\n        //call all arbitrary functions attached to onload\n        this.trigger(\"Load\");\n        this.timer.init();\n\n        return this;\n    },\n\n    // There are some events that need to be bound to Crafty when it's started/restarted, so store them here\n    // Switching Crafty's internals to use the new system idiom should allow removing this hack\n    _bindOnInit: [],\n    _preBindDone: false,\n    _preBind: function(event, handler) {\n        this._bindOnInit.push({\n            event: event,\n            handler: handler\n        });\n    },\n\n    /**@\n     * #Crafty.getVersion\n     * @category Core\n     * @kind Method\n     * \n     * @sign public String Crafty.getVersion()\n     * @returns Current version of Crafty as a string\n     *\n     * Return current version of crafty\n     *\n     * @example\n     * ~~~\n     * Crafty.getVersion(); //'0.5.2'\n     * ~~~\n     */\n    getVersion: function () {\n        return version;\n    },\n\n    /**@\n     * #Crafty.stop\n     * @category Core\n     * @kind Method\n     * \n     * @trigger CraftyStop - when the game is stopped  - {bool clearState}\n     * @sign public this Crafty.stop([bool clearState])\n     * @param clearState - if true the stage and all game state is cleared.\n     *\n     * Stops the EnterFrame interval and removes the stage element.\n     *\n     * To restart, use `Crafty.init()`.\n     * @see Crafty.init\n     */ \n    stop: function (clearState) {\n        Crafty.trigger(\"CraftyStop\", clearState);\n\n        this.timer.stop();\n        if (clearState) {\n            // Remove audio\n            Crafty.audio.remove();\n\n            //Destroy all systems\n            for (var s in Crafty._systems) {\n                Crafty._systems[s].destroy();\n            }\n\n            // Remove the stage element, and re-add a div with the same id\n            if (Crafty.stage && Crafty.stage.elem.parentNode) {\n                var newCrStage = document.createElement('div');\n                newCrStage.id = Crafty.stage.elem.id;\n                Crafty.stage.elem.parentNode.replaceChild(newCrStage, Crafty.stage.elem);\n            }\n\n            // reset callbacks, and indicate that prebound functions need to be bound on init again\n            Crafty._unbindAll();\n            Crafty._addCallbackMethods(Crafty);\n            this._preBindDone = false;\n\n            initState();\n        }\n        return this;\n    },\n\n    /**@\n     * #Crafty.pause\n     * @category Core\n     * @kind Method\n     * \n     * @trigger Pause - when the game is paused\n     * @trigger Unpause - when the game is unpaused\n     * @sign public this Crafty.pause(void)\n     *\n     * Pauses the game by stopping the EnterFrame event from firing. If the game is already paused it is unpaused.\n     * You can pass a boolean parameter if you want to pause or unpause no matter what the current state is.\n     * Modern browsers pauses the game when the page is not visible to the user. If you want the Pause event\n     * to be triggered when that happens you can enable autoPause in `Crafty.settings`.\n     *\n     * @example\n     * Have an entity pause the game when it is clicked.\n     * ~~~\n     * button.bind(\"click\", function() {\n     *     Crafty.pause();\n     * });\n     * ~~~\n     */\n    pause: function (toggle) {\n        if (arguments.length === 1 ? toggle : !this._paused) {\n            this.trigger('Pause');\n            this._paused = true;\n            setTimeout(function () {\n                Crafty.timer.stop();\n            }, 0);\n            Crafty.keydown = {};\n        } else {\n            this.trigger('Unpause');\n            this._paused = false;\n            setTimeout(function () {\n                Crafty.timer.init();\n            }, 0);\n        }\n        return this;\n    },\n\n    /**@\n     * #Crafty.isPaused\n     * @category Core\n     * @kind Method\n     * \n     * @sign public Boolean Crafty.isPaused()\n     * @returns Whether the game is currently paused.\n     *\n     * @example\n     * ~~~\n     * Crafty.isPaused();\n     * ~~~\n     */\n    isPaused: function () {\n        return this._paused;\n    },\n\n    /**@\n     * #Crafty.timer\n     * @category Game Loop\n     * @kind CoreObject\n     * \n     * Handles game ticks\n     */\n    timer: (function () {\n        /*\n         * `window.requestAnimationFrame` or its variants is called for animation.\n         * `.requestID` keeps a record of the return value previous `window.requestAnimationFrame` call.\n         * This is an internal variable. Used to stop frame.\n         */\n        var tick, requestID;\n\n        // Internal variables used to control the game loop.  Use Crafty.timer.steptype() to set these.\n        var mode = \"fixed\",\n            maxFramesPerStep = 5,\n            maxTimestep = 40;\n\n        // variables used by the game loop to track state\n        var endTime = 0,\n            timeSlip = 0,\n            gameTime;\n\n        // Controls the target rate of fixed mode loop.  Set these with the Crafty.timer.FPS function\n        var FPS = 50,\n            milliSecPerFrame = 1000 / FPS;\n\n\n\n\n        return {\n            init: function () {\n                // When first called, set the  gametime one frame before now!\n                if (typeof gameTime === \"undefined\")\n                    gameTime = (new Date().getTime()) - milliSecPerFrame;\n\n                var onFrame = (typeof window !== \"undefined\") && (\n                    window.requestAnimationFrame ||\n                    window.webkitRequestAnimationFrame ||\n                    window.mozRequestAnimationFrame ||\n                    window.oRequestAnimationFrame ||\n                    window.msRequestAnimationFrame ||\n                    null\n                );\n\n                if (onFrame) {\n                    tick = function () {\n                        Crafty.timer.step();\n                        if (tick !== null) {\n                            requestID = onFrame(tick);\n                        }\n                        //Crafty.log(requestID + ', ' + frame)\n                    };\n\n                    tick();\n                } else {\n                    tick = setInterval(function () {\n                        Crafty.timer.step();\n                    }, 1000 / FPS);\n                }\n            },\n\n            stop: function () {\n                Crafty.trigger(\"CraftyStopTimer\");\n\n                if (typeof tick !== \"function\") clearInterval(tick);\n\n                var onFrame = (typeof window !== \"undefined\") && (\n                    window.cancelAnimationFrame ||\n                    window.cancelRequestAnimationFrame ||\n                    window.webkitCancelRequestAnimationFrame ||\n                    window.mozCancelRequestAnimationFrame ||\n                    window.oCancelRequestAnimationFrame ||\n                    window.msCancelRequestAnimationFrame ||\n                    null\n                );\n\n                if (onFrame) onFrame(requestID);\n                tick = null;\n            },\n\n\n            /**@\n             * #Crafty.timer.steptype\n             * @comp Crafty.timer\n             * @kind Method\n             *\n             * @trigger NewSteptype - when the current steptype changes - { mode, maxTimeStep } - New steptype\n             *\n             * Can be called to set the type of timestep the game loop uses.\n             * @sign public void Crafty.timer.steptype(mode [, maxTimeStep])\n             * @param mode - the type of time loop.  Allowed values are \"fixed\", \"semifixed\", and \"variable\".  Crafty defaults to \"fixed\".\n             * @param maxTimeStep - For \"fixed\", sets the max number of frames per step.   For \"variable\" and \"semifixed\", sets the maximum time step allowed.\n             *\n             * Can be called to get the type of timestep the game loop uses.\n             * @sign public Object Crafty.timer.steptype(void)\n             * @returns Object containing the current timestep's properties { mode, maxTimeStep }\n             *\n             * * In \"fixed\" mode, each frame is sent the same value of `dt`, and to achieve the target game speed, mulitiple frame events are triggered before each render.\n             * * In \"variable\" mode, there is only one frame triggered per render.  This recieves a value of `dt` equal to the actual elapsed time since the last frame.\n             * * In \"semifixed\" mode, multiple frames per render are processed, and the total time since the last frame is divided evenly between them.\n             *\n             * @see Crafty.timer.FPS\n             */\n            steptype: function (newmode, option) {\n                // setters\n                if (newmode === \"variable\" || newmode === \"semifixed\") {\n                    mode = newmode;\n                    if (option)\n                        maxTimestep = option;\n                    Crafty.trigger(\"NewSteptype\", {mode: mode, maxTimeStep: maxTimestep});\n                } else if (newmode === \"fixed\") {\n                    mode = \"fixed\";\n                    if (option)\n                        maxFramesPerStep = option;\n                    Crafty.trigger(\"NewSteptype\", {mode: mode, maxTimeStep: maxFramesPerStep});\n                } else if (newmode !== undefined) {\n                    throw \"Invalid step type specified\";\n                // getter\n                } else {\n                    return {\n                        mode: mode,\n                        maxTimeStep: (mode === \"variable\" || mode === \"semifixed\") ? maxTimestep : maxFramesPerStep\n                    };\n                }\n            },\n\n            /**@\n             * #Crafty.timer.step\n             * @comp Crafty.timer\n             * @kind Method\n             * \n             * @sign public void Crafty.timer.step()\n             * @trigger EnterFrame - Triggered on each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }\n             * @trigger ExitFrame - Triggered after each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }\n             * @trigger PreRender - Triggered every time immediately before a scene should be rendered\n             * @trigger RenderScene - Triggered every time a scene should be rendered\n             * @trigger PostRender - Triggered every time immediately after a scene should be rendered\n             * @trigger MeasureWaitTime - Triggered at the beginning of each step after the first.  Passes the time the game loop waited between steps. - Number\n             * @trigger MeasureFrameTime - Triggered after each frame.  Passes the time it took to advance one frame. - Number\n             * @trigger MeasureRenderTime - Triggered after each render. Passes the time it took to render the scene - Number\n             *\n             * Advances the game by performing a step. A step consists of one/multiple frames followed by a render. The amount of frames depends on the timer's steptype.\n             * Specifically it triggers `EnterFrame` & `ExitFrame` events for each frame and `PreRender`, `RenderScene` & `PostRender` events for each render.\n             *\n             * @see Crafty.timer.steptype\n             * @see Crafty.timer.FPS\n             */\n            step: function () {\n                var drawTimeStart, dt, lastFrameTime, loops = 0;\n\n                var currentTime = new Date().getTime();\n                if (endTime > 0)\n                    Crafty.trigger(\"MeasureWaitTime\", currentTime - endTime);\n\n                // If we're currently ahead of the current time, we need to wait until we're not!\n                if (gameTime + timeSlip >= currentTime) {\n                    endTime = currentTime;\n                    return;\n                }\n\n                var netTimeStep = currentTime - (gameTime + timeSlip);\n                // We try to keep up with the target FPS by processing multiple frames per render\n                // If we're hopelessly behind, stop trying to catch up.\n                if (netTimeStep > milliSecPerFrame * 20) {\n                    //gameTime = currentTime - milliSecPerFrame;\n                    timeSlip += netTimeStep - milliSecPerFrame;\n                    netTimeStep = milliSecPerFrame;\n                }\n\n                // Set up how time is incremented\n                if (mode === \"fixed\") {\n                    loops = Math.ceil(netTimeStep / milliSecPerFrame);\n                    // maxFramesPerStep adjusts how willing we are to delay drawing in order to keep at the target FPS\n                    loops = Math.min(loops, maxFramesPerStep);\n                    dt = milliSecPerFrame;\n                } else if (mode === \"variable\") {\n                    loops = 1;\n                    dt = netTimeStep;\n                    // maxTimestep is the maximum time to be processed in a frame.  (Large dt => unstable physics)\n                    dt = Math.min(dt, maxTimestep);\n                } else if (mode === \"semifixed\") {\n                    loops = Math.ceil(netTimeStep / maxTimestep);\n                    dt = netTimeStep / loops;\n                }\n\n                // Process frames, incrementing the game clock with each frame.\n                // dt is determined by the mode\n                for (var i = 0; i < loops; i++) {\n                    lastFrameTime = currentTime;\n                    \n                    var frameData = {\n                        frame: frame++,\n                        dt: dt,\n                        gameTime: gameTime\n                    };\n                    // Handle any changes due to user input\n                    Crafty.trigger(\"EnterFrameInput\", frameData);\n                    // Everything that changes over time hooks into this event\n                    Crafty.trigger(\"EnterFrame\", frameData);\n                    // Event that happens after \"EnterFrame\", e.g. for resolivng collisions applied through movement during \"EnterFrame\" events\n                    Crafty.trigger(\"ExitFrame\", frameData);\n                    gameTime += dt;\n\n                    currentTime = new Date().getTime();\n                    Crafty.trigger(\"MeasureFrameTime\", currentTime - lastFrameTime);\n                }\n\n                //If any frames were processed, render the results\n                if (loops > 0) {\n                    drawTimeStart = currentTime;\n                    Crafty.trigger(\"PreRender\"); // Pre-render setup opportunity\n                    Crafty.trigger(\"RenderScene\");\n                    Crafty.trigger(\"PostRender\"); // Post-render cleanup opportunity\n                    currentTime = new Date().getTime();\n                    Crafty.trigger(\"MeasureRenderTime\", currentTime - drawTimeStart);\n                }\n\n                endTime = currentTime;\n            },\n            /**@\n             * #Crafty.timer.FPS\n             * @comp Crafty.timer\n             * @kind Method\n             * \n             * @sign public void Crafty.timer.FPS()\n             * Returns the target frames per second. This is not an actual frame rate.\n             * @sign public void Crafty.timer.FPS(Number value)\n             * @param value - the target rate\n             * @trigger FPSChange - Triggered when the target FPS is changed by user - Number - new target FPS\n             *\n             * Sets the target frames per second. This is not an actual frame rate.\n             * The default rate is 50.\n             *\n             * @see Crafty.timer.steptype\n             */\n            FPS: function (value) {\n                if (typeof value === \"undefined\")\n                    return FPS;\n                else {\n                    FPS = value;\n                    milliSecPerFrame = 1000 / FPS;\n                    Crafty.trigger(\"FPSChange\", value);\n                }\n            },\n\n            /**@\n             * #Crafty.timer.simulateFrames\n             * @comp Crafty.timer\n             * @kind Method\n             * \n             * @sign public this Crafty.timer.simulateFrames(Number frames[, Number timestep])\n             * Advances the game state by a number of frames and draws the resulting stage at the end. Useful for tests and debugging.\n             * @param frames - number of frames to simulate\n             * @param timestep - the duration to pass each frame.  Defaults to milliSecPerFrame (20 ms) if not specified.\n             */\n            simulateFrames: function (frames, timestep) {\n                timestep = timestep || milliSecPerFrame;\n                while (frames-- > 0) {\n                    var frameData = {\n                        frame: frame++,\n                        dt: timestep\n                    };\n                    Crafty.trigger(\"EnterFrameInput\", frameData);\n                    Crafty.trigger(\"EnterFrame\", frameData);\n                    Crafty.trigger(\"ExitFrame\", frameData);\n                }\n                Crafty.trigger(\"PreRender\");\n                Crafty.trigger(\"RenderScene\");\n                Crafty.trigger(\"PostRender\");\n            }\n        };\n    })(),\n\n\n    /**@\n     * #Crafty.e\n     * @category Core\n     * @kind Method\n     * \n     * @trigger NewEntity - When the entity is created and all components are added - { id:Number }\n     * @sign public Entity Crafty.e(String componentList)\n     * @param componentList - List of components to assign to new entity\n     * @sign public Entity Crafty.e(String component1[, .., String componentN])\n     * @param component# - Component to add\n     *\n     * Creates an entity. Any arguments will be applied in the same\n     * way `.addComponent()` is applied as a quick way to add components.\n     *\n     * Any component added will augment the functionality of\n     * the created entity by assigning the properties and methods from the component to the entity.\n     *\n     * @example\n     * ~~~\n     * var myEntity = Crafty.e(\"2D, DOM, Color\");\n     * ~~~\n     *\n     * @see Crafty.c\n     */\n    e: function () {\n        var id = UID();\n        entities[id] = null;\n        entities[id] = Crafty(id);\n\n        if (arguments.length > 0) {\n            entities[id].addComponent.apply(entities[id], arguments);\n        }\n        entities[id].setName('Entity #' + id); //set default entity human readable name\n        entities[id].addComponent(\"obj\"); //every entity automatically assumes obj\n\n        Crafty.trigger(\"NewEntity\", {\n            id: id\n        });\n\n        return entities[id];\n    },\n\n    /**@\n     * #Crafty.c\n     * @category Core\n     * @kind Method\n     * \n     * @sign public void Crafty.c(String name, Object component)\n     * @param name - Name of the component\n     * @param component - Object with the component's properties and methods\n     *\n     * Creates a component where the first argument is the ID and the second\n     * is the object that will be inherited by entities.\n     *\n     * Specifically, each time a component is added to an entity, the component properties are copied over to the entity. \n     * * In the case of primitive datatypes (booleans, numbers, strings) the property is copied by value.\n     * * In the case of complex datatypes (objects, arrays, functions) the property is copied by reference and will thus reference the components' original property.\n     * * (See the two examples below for further explanation)\n     * Note that when a component method gets called, the `this` keyword will refer to the current entity the component was added to.\n     *\n     * A handful of methods or properties are treated specially. They are invoked in partiular contexts, and (in those contexts) cannot be overridden by other components.\n     *\n     * - `required`: A string listing required components, which will be added to the component before `init()` runs.\n     * - `init`: A function to be called when the component is added to an entity\n     * - `remove`: A function which will be called just before a component is removed, or before an entity is destroyed. It is passed a single boolean parameter that is `true` if the entity is being destroyed.\n     * - `events`: An object whose properties represent functions bound to events equivalent to the property names.  (See the example below.)  The binding occurs directly after the call to `init`, and will be removed directly before `remove` is called.\n     *\n     * In addition to these hardcoded special methods, there are some conventions for writing components.\n     *\n     * - Properties or methods that start with an underscore are considered private.\n     * - A method with the same name as the component is considered to be a constructor\n     * and is generally used when you need to pass configuration data to the component on a per entity basis.\n     *\n     * @example\n     * ~~~\n     * Crafty.c(\"Annoying\", {\n     *     _message: \"HiHi\",\n     *     init: function() {\n     *         this.bind(\"EnterFrame\", function() { alert(this.message); });\n     *     },\n     *     annoying: function(message) { this.message = message; }\n     * });\n     *\n     * Crafty.e(\"Annoying\").annoying(\"I'm an orange...\");\n     * ~~~\n     * To attach to the \"EnterFrame\" event using the `events` property instead:\n     * ~~~\n     * Crafty.c(\"Annoying\", {\n     *     _message: \"HiHi\",\n     *     events: {\n     *         \"EnterFrame\": function(){alert(this.message);}\n     *     }\n     *     annoying: function(message) { this.message = message; }\n     * });\n     * ~~~\n     *\n     *\n     * @warning In the examples above the field _message is local to the entity. \n     * That is, if you create many entities with the Annoying component, they can all have different values for _message.\n     * That is because it is a simple value, and simple values are copied by value. \n     * If however the field had been an object or array, \n     * the value would have been shared by all entities with the component,\n     * because complex types are copied by reference in javascript.\n     * This is probably not what you want and the following example demonstrates how to work around it.\n     *\n     * ~~~\n     * Crafty.c(\"MyComponent\", {\n     *     _iAmShared: { a: 3, b: 4 },\n     *     init: function() {\n     *         this._iAmNotShared = { a: 3, b: 4 };\n     *     },\n     * });\n     * ~~~\n     *\n     * @see Crafty.e\n     */\n    c: function (compName, component) {\n        components[compName] = component;\n    },\n\n    /**@\n     * #Crafty.trigger\n     * @category Core, Events\n     * @kind Method\n     * \n     * @sign public void Crafty.trigger(String eventName, * data)\n     * @param eventName - Name of the event to trigger\n     * @param data - Arbitrary data to pass into the callback as an argument\n     *\n     * This method will trigger every single callback attached to the event name. This means\n     * every global event and every entity that has a callback.\n     *\n     * @see Crafty.bind\n     */\n    trigger: function (event, data) {\n\n        //  To learn how the event system functions, see the comments for Crafty._callbackMethods\n        var hdl = handlers[event] || (handlers[event] = {}),\n            h, callbacks;\n        //loop over every object bound\n        for (h in hdl) {\n            // Check whether h needs to be processed\n            if (!hdl.hasOwnProperty(h)) continue;\n            callbacks = hdl[h];\n            if (!callbacks || callbacks.length === 0) continue;\n\n            callbacks.context._runCallbacks(event, data);\n        }\n    },\n\n    /**@\n     * #Crafty.bind\n     * @category Core, Events\n     * @kind Method\n     * \n     * @sign public Function bind(String eventName, Function callback)\n     * @param eventName - Name of the event to bind to\n     * @param callback - Method to execute upon event triggered\n     * @returns callback function which can be used for unbind\n     *\n     * Binds to a global event. Method will be executed when `Crafty.trigger` is used\n     * with the event name.\n     *\n     * @see Crafty.trigger, Crafty.unbind\n     */\n    bind: function (event, callback) {\n\n        // To learn how the event system functions, see the comments for Crafty._callbackMethods\n        this._bindCallback(event, callback);\n        return callback;\n    },\n\n\n    /**@\n     * #Crafty.uniqueBind\n     * @category Core, Events\n     * @kind Method\n     * \n     * @sign public Function uniqueBind(String eventName, Function callback)\n     * @param eventName - Name of the event to bind to\n     * @param callback - Method to execute upon event triggered\n     * @returns callback function which can be used for unbind\n     *\n     * Works like Crafty.bind, but prevents a callback from being bound multiple times.\n     *\n     * @see Crafty.bind\n     */\n    uniqueBind: function (event, callback) {\n        this.unbind(event, callback);\n        return this.bind(event, callback);\n    },\n\n    /**@\n     * #Crafty.one\n     * @category Core, Events\n     * @kind Method\n     * \n     * @sign public Function one(String eventName, Function callback)\n     * @param eventName - Name of the event to bind to\n     * @param callback - Method to execute upon event triggered\n     * @returns callback function which can be used for unbind\n     *\n     * Works like Crafty.bind, but will be unbound once the event triggers.\n     *\n     * @see Crafty.bind\n     */\n    one: function (event, callback) {\n        var self = this;\n        var oneHandler = function (data) {\n            callback.call(self, data);\n            self.unbind(event, oneHandler);\n        };\n        return self.bind(event, oneHandler);\n    },\n\n    /**@\n     * #Crafty.unbind\n     * @category Core, Events\n     * @kind Method\n     * \n     * @sign public Boolean Crafty.unbind(String eventName, Function callback)\n     * @param eventName - Name of the event to unbind\n     * @param callback - Function to unbind\n     * @example\n     * ~~~\n     *    var play_gameover_sound = function () {...};\n     *    Crafty.bind('GameOver', play_gameover_sound);\n     *    ...\n     *    Crafty.unbind('GameOver', play_gameover_sound);\n     * ~~~\n     *\n     * The first line defines a callback function. The second line binds that\n     * function so that `Crafty.trigger('GameOver')` causes that function to\n     * run. The third line unbinds that function.\n     *\n     * ~~~\n     *    Crafty.unbind('GameOver');\n     * ~~~\n     *\n     * This unbinds ALL global callbacks for the event 'GameOver'. That\n     * includes all callbacks attached by `Crafty.bind('GameOver', ...)`, but\n     * none of the callbacks attached by `some_entity.bind('GameOver', ...)`.\n     */\n    unbind: function (event, callback) {\n        //  To learn how the event system functions, see the comments for Crafty._callbackMethods\n        this._unbindCallbacks(event, callback);\n    },\n\n    /**@\n     * #Crafty.frame\n     * @category Core\n     * @kind Method\n     * \n     * @sign public Number Crafty.frame(void)\n     * @returns the current frame number\n     */\n    frame: function () {\n        return frame;\n    },\n\n    components: function () {\n        return components;\n    },\n\n    isComp: function (comp) {\n        return comp in components;\n    },\n\n    debug: function (str) {\n        // access internal variables - handlers or entities\n        if (str === 'handlers') {\n            return handlers;\n        }\n        return entities;\n    },\n\n    /**@\n     * #Crafty.settings\n     * @category Core\n     * @kind CoreObject\n     * \n     * Modify the inner workings of Crafty through the settings.\n     */\n    settings: (function () {\n        var states = {},\n            callbacks = {};\n\n        return {\n            /**@\n             * #Crafty.settings.register\n             * @comp Crafty.settings\n             * @kind Method\n             * \n             * @sign public void Crafty.settings.register(String settingName, Function callback)\n             * @param settingName - Name of the setting\n             * @param callback - Function to execute when use modifies setting\n             *\n             * Use this to register custom settings. Callback will be executed when `Crafty.settings.modify` is used.\n             *\n             * @see Crafty.settings.modify\n             */\n            register: function (setting, callback) {\n                callbacks[setting] = callback;\n            },\n\n            /**@\n             * #Crafty.settings.modify\n             * @comp Crafty.settings\n             * @kind Method\n             * \n             * @sign public void Crafty.settings.modify(String settingName, * value)\n             * @param settingName - Name of the setting\n             * @param value - Value to set the setting to\n             *\n             * Modify settings through this method.\n             *\n             * @see Crafty.settings.register, Crafty.settings.get\n             */\n            modify: function (setting, value) {\n                if (!callbacks[setting]) return;\n                callbacks[setting].call(states[setting], value);\n                states[setting] = value;\n            },\n\n            /**@\n             * #Crafty.settings.get\n             * @comp Crafty.settings\n             * @kind Method\n             * \n             * @sign public * Crafty.settings.get(String settingName)\n             * @param settingName - Name of the setting\n             * @returns Current value of the setting\n             *\n             * Returns the current value of the setting.\n             *\n             * @see Crafty.settings.register, Crafty.settings.get\n             */\n            get: function (setting) {\n                return states[setting];\n            }\n        };\n    })(),\n\n    /**@\n     * #Crafty.defineField\n     * @category Core\n     * @kind Method\n     * \n     * @sign public void Crafty.defineField(Object object, String property, Function getCallback, Function setCallback)\n     * @param object - Object to define property on\n     * @param property - Property name to assign getter & setter to\n     * @param getCallback - Method to execute if the property is accessed\n     * @param setCallback - Method to execute if the property is mutated\n     *\n     * Assigns getters and setters to the property in the given object.\n     * A getter will watch a property waiting for access and will then invoke the\n     * given getCallback when attempting to retrieve.\n     * A setter will watch a property waiting for mutation and will then invoke the\n     * given setCallback when attempting to modify.\n     *\n     * @example\n     * ~~~\n     * var ent = Crafty.e(\"2D\");\n     * Crafty.defineField(ent, \"customData\", function() { \n     *    return this._customData; \n     * }, function(newValue) { \n     *    this._customData = newValue;\n     * });\n     *\n     * ent.customData = \"2\" // set customData to 2\n     * Crafty.log(ent.customData) // prints 2\n     * ~~~\n     * @see Crafty Core#.defineField\n     */\n    defineField: function(obj, prop, getCallback, setCallback) {\n        Object.defineProperty(obj, prop, {\n            get: getCallback,\n            set: setCallback,\n            configurable: false,\n            enumerable: true,\n        });\n    },\n\n    clone: clone\n});\n\n/**\n * Return a unique ID\n */\n\nfunction UID() {\n    var id = GUID++;\n    //if GUID is not unique\n    if (id in entities) {\n        return UID(); //recurse until it is unique\n    }\n    return id;\n}\n\n/**@\n * #Crafty.clone\n * @category Core\n * @kind Method\n * \n * @sign public Object .clone(Object obj)\n * @param obj - an object\n *\n * Deep copy (a.k.a clone) of an object.\n * @note This function should be used for plain objects with no cyclic references. To clone an entity use its `.clone` method instead.\n * \n * @example\n * ~~~\n * // Null or Primitive types\n * Crafty.clone(null); // returns null\n * Crafty.clone(4);    // returns 4\n * \n * // Objects\n * var globalCount = 0;\n * var obj1 = {\n *   count: 0,\n *   inc: function(){\n *      this.count++;\n *      globalCount++;\n *   },\n *   log: function(){\n *     console.log(this.count + '/' + globalCount);\n *   }\n * };\n * \n * obj1.inc();\n * obj1.log(); // prints \"1/1\" to the log\n * \n * var obj2 = Crafty.clone(obj1);\n * obj2.log(); // prints \"1/1\" to the log\n * \n * obj1.inc();\n * obj1.log(); // prints \"2/2\" to the log\n * obj2.log(); // prints \"1/2\" to the log\n * ~~~\n *\n * @see Crafty Core#.clone\n */\n\nfunction clone(obj) {\n    if (obj === null || typeof (obj) !== 'object')\n        return obj;\n\n    var temp = obj.constructor(); // changed\n\n    for (var key in obj)\n        temp[key] = clone(obj[key]);\n    return temp;\n}\n\n// export Crafty\nif (typeof define === 'function') { // AMD\n    define('crafty', [], function () { // jshint ignore:line\n        return Crafty;\n    });\n}\n\nmodule.exports = Crafty;"},"hash":"67ad642102350efef0adf62d1ec16407"}