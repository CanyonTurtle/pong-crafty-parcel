{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js'),\n    document = window.document;\n\n\n/**@\n * #DomLayer\n * @category Graphics\n * @kind System\n *\n * Collection of mostly private methods to represent entities using the DOM.\n */\nCrafty._registerLayerTemplate(\"DOM\", {\n    type: \"DOM\",\n    options: {\n        xResponse: 1,\n        yResponse: 1,\n        scaleResponse: 1,\n        z: 0\n    },\n\n    _changedObjs: [],\n    _dirtyViewport: false,\n\n    /**@\n     * #._div\n     * @comp DomLayer\n     * @kind Property\n     * @private\n     * \n     * A div inside the `#cr-stage` div that holds all DOM entities.\n     */\n    _div: null,\n\n    init: function () {\n        // Avoid shared state between systems\n        this._changedObjs = [];\n\n        // Create the div that will contain DOM elements\n        var div = this._div = document.createElement(\"div\");\n\n        Crafty.stage.elem.appendChild(div);\n        div.style.position = \"absolute\";\n        div.style.zIndex = this.options.z;\n        div.style.transformStyle = \"preserve-3d\"; // Seems necessary for Firefox to preserve zIndexes?\n\n        // Bind scene rendering (see drawing.js)\n        this.uniqueBind(\"RenderScene\", this._render);\n\n        // Layers should generally listen for resize events, but the DOM layers automatically inherit the stage's dimensions\n\n        // Listen for changes in pixel art settings\n        // Since window is inited before stage, can't set right away, but shouldn't need to!\n        this.uniqueBind(\"PixelartSet\", this._setPixelArt);\n\n        this.uniqueBind(\"InvalidateViewport\", function() {\n            this._dirtyViewport = true;\n        });\n        Crafty._addDrawLayerInstance(this);\n    },\n\n    // Cleanup the DOM when the layer is destroyed\n    remove: function() {\n        this._div.parentNode.removeChild(this._div);\n        Crafty._removeDrawLayerInstance(this);\n    },\n\n    // Handle whether images should be smoothed or not\n    _setPixelArt: function(enabled) {\n        var style = this._div.style;\n        var camelize = Crafty.domHelper.camelize;\n        if (enabled) {\n            style[camelize(\"image-rendering\")] = \"optimizeSpeed\";   /* legacy */\n            style[camelize(\"image-rendering\")] = \"-moz-crisp-edges\";    /* Firefox */\n            style[camelize(\"image-rendering\")] = \"-o-crisp-edges\";  /* Opera */\n            style[camelize(\"image-rendering\")] = \"-webkit-optimize-contrast\";   /* Webkit (Chrome & Safari) */\n            style[camelize(\"-ms-interpolation-mode\")] = \"nearest-neighbor\";  /* IE */\n            style[camelize(\"image-rendering\")] = \"optimize-contrast\";   /* CSS3 proposed */\n            style[camelize(\"image-rendering\")] = \"pixelated\";   /* CSS4 proposed */\n            style[camelize(\"image-rendering\")] = \"crisp-edges\"; /* CSS4 proposed */\n        } else {\n            style[camelize(\"image-rendering\")] = \"optimizeQuality\";   /* legacy */\n            style[camelize(\"-ms-interpolation-mode\")] = \"bicubic\";   /* IE */\n            style[camelize(\"image-rendering\")] = \"auto\";   /* CSS3 */\n        }\n    },\n\n    /**@\n     * #.debug\n     * @comp DomLayer\n     * @kind Method\n     * \n     * @sign public .debug()\n     * \n     * Logs the current list of entities that have been invalidated in this layer.\n     */\n    debug: function () {\n        Crafty.log(this._changedObjs);\n    },\n\n\n    /**@\n     * #._render\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .render()\n     *\n     * When \"RenderScene\" is triggered, draws all DOM entities that have been flagged\n     *\n     * @see DOM#.draw\n     */\n    _render: function () {\n        var changed = this._changedObjs;\n        // Adjust the viewport\n        if (this._dirtyViewport) {\n           this._setViewport();\n           this._dirtyViewport = false;\n        }\n\n        //if no objects have been changed, stop\n        if (!changed.length) return;\n\n        var i = 0,\n            k = changed.length;\n        //loop over all DOM elements needing updating\n        for (; i < k; ++i) {\n            changed[i].draw()._changed = false;\n        }\n\n        //reset DOM array\n        changed.length = 0;\n\n    },\n\n    /**@\n     * #.dirty\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .dirty(ent)\n     * @param ent - The entity to mark as dirty\n     *\n     * Add an entity to the list of DOM object to draw\n     */\n    dirty: function add(ent) {\n        this._changedObjs.push(ent);\n    },\n\n    /**@\n     * #.attach\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .attach(ent)\n     * @param ent - The entity to add\n     *\n     * Add an entity to the layer\n     */\n    attach: function attach(ent) {\n        ent._drawContext = this.context;\n        // attach the entity's div element to the dom layer\n        this._div.appendChild(ent._element);\n        // set position style and entity id\n        ent._element.style.position = \"absolute\";\n        ent._element.id = \"ent\" + ent[0];\n    },\n    \n    /**@\n     * #.detach\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .detach(ent)\n     * @param ent - The entity to remove\n     *\n     * Removes an entity from the layer\n     */\n    detach: function detach(ent) {\n        this._div.removeChild(ent._element);\n    },\n\n    // Sets the viewport position and scale\n    // Called by render when the dirtyViewport flag is set\n    _setViewport: function() {\n        var style = this._div.style,\n            view = this._viewportRect();\n\n        var scale = view._scale;\n        var dx = -view._x * scale;\n        var dy = -view._y * scale;\n\n        style.transform = style[Crafty.support.prefix + \"Transform\"] = \"scale(\" + scale + \", \" + scale + \")\";\n        style.left = Math.round(dx) + \"px\";\n        style.top = Math.round(dy) + \"px\";\n        style.zIndex = this.options.z;\n    }\n\n});"},"hash":"efa55eea9ec041d8d9028fcb70b35395"}