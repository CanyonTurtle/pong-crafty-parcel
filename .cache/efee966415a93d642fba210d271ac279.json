{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js');\n\ntry {\n  var storage = (typeof window !== \"undefined\" && window.localStorage) || (new require('node-localstorage').LocalStorage('./localStorage'));\n} catch(e) {\n  var storage = null;\n}\n\n\n/**@\n * #Storage\n * @category Utilities\n * @kind Property\n * \n * Very simple way to get and set values, which will persist when the browser is closed also.\n * Storage wraps around HTML5 Web Storage, which is well-supported across browsers and platforms, but limited to 5MB total storage per domain.\n * Storage is also available for node, which is permanently persisted to the `./localStorage` folder - take care of removing entries. Note that multiple Crafty instances use the same storage, so care has to be taken not to overwrite existing entries.\n */\n/**@\n * #Crafty.storage\n * @comp Storage\n * @kind Method\n * \n * @sign Crafty.storage(String key)\n * @param key - a key you would like to get from the storage. \n * @returns The stored value, or `null` if none saved under that key exists\n *\n * @sign Crafty.storage(String key, String value)\n * @param key - the key you would like to save the data under.\n * @param value - the value you would like to save.\n *\n * @sign Crafty.storage(String key, [Object value, Array value, Boolean value])\n * @param key - the key you would like to save the data under.\n * @param value - the value you would like to save, can be an Object or an Array.\n *\n * `Crafty.storage` is used synchronously to either get or set values. \n *\n * You can store booleans, strings, objects and arrays.\n *\n * @note Because the underlying method is synchronous, it can cause slowdowns if used frequently during gameplay.\n * You should aim to load or save data at reasonable times such as on level load,\n * or in response to specific user actions.\n *\n * @note If used in a cross-domain context, the localStorage might not be accessible.\n *\n * @example\n * Get an already stored value\n * ~~~\n * var playername = Crafty.storage('playername');\n * ~~~\n *\n * @example\n * Save a value\n * ~~~\n * Crafty.storage('playername', 'Hero');\n * ~~~\n *\n * @example\n * Test to see if a value is already there.\n * ~~~\n * var heroname = Crafty.storage('name');\n * if(!heroname){\n *   // Maybe ask the player what their name is here\n *   heroname = 'Guest';\n * }\n * // Do something with heroname\n * ~~~\n */\n\nvar store = function(key, value) {\n  var _value = value;\n\n  if(!storage) {\n    Crafty.error(\"Local storage is not accessible.  (Perhaps you are including crafty.js cross-domain?)\");\n    return false;\n  }\n\n  if(arguments.length === 1) {\n    try {\n      return JSON.parse(storage.getItem(key));\n    }\n    catch (e) {\n      return storage.getItem(key);\n    }\n  } else {\n    if(typeof value === \"object\") {\n      _value = JSON.stringify(value);\n    }\n\n    storage.setItem(key, _value);\n    \n  }\n\n};\n/**@\n * #Crafty.storage.remove\n * @comp Storage\n * @kind Method\n * \n * @sign Crafty.storage.remove(String key)\n * @param key - a key where you will like to delete the value of.\n *\n * Generally you do not need to remove values from localStorage, but if you do\n * store large amount of text, or want to unset something you can do that with\n * this function.\n *\n * @example\n * Get an already stored value\n * ~~~\n * Crafty.storage.remove('playername');\n * ~~~\n *\n */\nstore.remove = function(key) {\n  if(!storage){\n    Crafty.error(\"Local storage is not accessible.  (Perhaps you are including crafty.js cross-domain?)\");\n    return;\n  }\n  storage.removeItem(key);\n};\n\nmodule.exports = store;\n"},"hash":"5fe703dde3a64e578f9e31645fff3117"}