{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js'),\n    document = window.document;\n\nCrafty.extend({\n    /**@\n     * #Crafty.viewport\n     * @category Stage\n     * @kind Property\n     * \n     * @trigger ViewportScroll - when the viewport's x or y coordinates change\n     * @trigger ViewportScale - when the viewport's scale changes\n     * @trigger ViewportResize - when the viewport's dimension's change\n     * @trigger InvalidateViewport - when the viewport changes\n     * @trigger StopCamera - when any camera animations should stop, such as at the start of a new animation.\n     * @trigger CameraAnimationDone - when a camera animation reaches completion\n     *\n     * Viewport is essentially a 2D camera looking at the stage. Can be moved or zoomed, which\n     * in turn will react just like a camera moving in that direction.\n     *\n     * There are multiple camera animation methods available - these are the viewport methods with an animation time parameter and the `follow` method.\n     * Only one animation can run at a time. Starting a new animation will cancel the previous one and the appropriate events will be fired.\n     * \n     * Tip: At any given moment, the stuff that you can see is...\n     * \n     * `x` between `(-Crafty.viewport._x)` and `(-Crafty.viewport._x + (Crafty.viewport._width / Crafty.viewport._scale))`\n     * \n     * `y` between `(-Crafty.viewport._y)` and `(-Crafty.viewport._y + (Crafty.viewport._height / Crafty.viewport._scale))`\n     *\n     *\n     * @example\n     * Prevent viewport from adjusting itself when outside the game world.\n     * Scale the viewport so that entities appear twice as large.\n     * Then center the viewport on an entity over the duration of 3 seconds.\n     * After that animation finishes, start following the entity.\n     * ~~~\n     * var ent = Crafty.e('2D, DOM').attr({x: 250, y: 250, w: 100, h: 100});\n     *\n     * Crafty.viewport.clampToEntities = false;\n     * Crafty.viewport.scale(2);\n     * Crafty.one(\"CameraAnimationDone\", function() {\n     *     Crafty.viewport.follow(ent, 0, 0);\n     * });\n     * Crafty.viewport.centerOn(ent, 3000);\n     * ~~~\n     */\n    viewport: {\n        /**@\n         * #Crafty.viewport.clampToEntities\n         * @comp Crafty.viewport\n         * @kind Property\n         *\n         * Decides if the viewport functions should clamp to game entities.\n         * When set to `true` functions such as Crafty.viewport.mouselook() will not allow you to move the\n         * viewport over areas of the game that has no entities.\n         * For development it can be useful to set this to false.\n         */\n        clampToEntities: true,\n        _width: 0,\n        _height: 0,\n        /**@\n         * #Crafty.viewport.x\n         * @comp Crafty.viewport\n         * @kind Property\n         *\n         * Will move the stage and therefore every visible entity along the `x`\n         * axis in the opposite direction.\n         *\n         * When this value is set, it will shift the entire stage. This means that entity\n         * positions are not exactly where they are on screen. To get the exact position,\n         * simply add `Crafty.viewport.x` onto the entities `x` position.\n         */\n        _x: 0,\n        /**@\n         * #Crafty.viewport.y\n         * @comp Crafty.viewport\n         * @kind Property\n         *\n         * Will move the stage and therefore every visible entity along the `y`\n         * axis in the opposite direction.\n         *\n         * When this value is set, it will shift the entire stage. This means that entity\n         * positions are not exactly where they are on screen. To get the exact position,\n         * simply add `Crafty.viewport.y` onto the entities `y` position.\n         */\n        _y: 0,\n\n        /**@\n         * #Crafty.viewport._scale\n         * @comp Crafty.viewport\n         * @kind Property\n         *\n         * This value is the current scale (zoom) of the viewport. When the value is bigger than 1, everything\n         * looks bigger (zoomed in). When the value is less than 1, everything looks smaller (zoomed out). This\n         * does not alter the size of the stage itself, just the magnification of what it shows.\n         * \n         * This is a read-only property: Do not set it directly. Instead, use `Crafty.viewport.scale(...)`\n         * or `Crafty.viewport.zoom(...)`\n         */\n\n        _scale: 1,\n\n        /**@\n         * #Crafty.viewport.bounds\n         * @comp Crafty.viewport\n         * @kind Property\n         *\n         * A rectangle which defines the bounds of the viewport.\n         * It should be an object with two properties, `max` and `min`,\n         * which are each an object with `x` and `y` properties.\n         *\n         * If this property is null, Crafty uses the bounding box of all the items\n         * on the stage.  This is the initial value.  (To prevent this behavior, set `Crafty.viewport.clampToEntities` to `false`)\n         *\n         * If you wish to bound the viewport along one axis but not the other, you can use `-Infinity` and `+Infinity` as bounds.\n         *\n         * @see Crafty.viewport.clampToEntities\n         *\n         * @example\n         * Set the bounds to a 500 by 500 square:\n         *\n         * ~~~\n         * Crafty.viewport.bounds = {min:{x:0, y:0}, max:{x:500, y:500}};\n         * ~~~\n         */\n        bounds: null,\n\n        /**@\n         * #Crafty.viewport.scroll\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign Crafty.viewport.scroll(String axis, Number val)\n         * @param axis - 'x' or 'y'\n         * @param val - The new absolute position on the axis\n         *\n         * Will move the viewport to the position given on the specified axis\n         *\n         * @example\n         * Will move the camera 500 pixels right of its initial position, in effect\n         * shifting everything in the viewport 500 pixels to the left.\n         *\n         * ~~~\n         * Crafty.viewport.scroll('_x', 500);\n         * ~~~\n         */\n        scroll: function (axis, val) {\n            this[axis] = val;\n            Crafty.trigger(\"ViewportScroll\");\n            Crafty.trigger(\"InvalidateViewport\");\n        },\n\n        rect_object: { _x: 0, _y: 0, _w: 0, _h: 0},\n\n        /**@\n         * #Crafty.viewport.rect\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public Object Crafty.viewport.rect([Object out])\n         * @param Object out - an optional Object to write the `rect` to\n         * @return a rectangle encompassing the currently visible viewport region.\n         *         Contains the `_x`,`_y`,`_w`,`_h` properties.\n         *\n         * Convenience method which returns a `rect` of the currently visible viewport region.\n         * With no supplied `out` parameter, this method returns an internally reused object across invocations.\n         * If you want to save the viewport region for later use, pass an `out` argument instead, where the region will be written to.\n         *\n         * @example\n         * The `rect` is equivalent to the following properties:\n         * ~~~\n         * var rect = Crafty.viewport.rect();\n         *\n         * rect._x === -Crafty.viewport._x\n         * rect._y === -Crafty.viewport._y\n         * rect._w === Crafty.viewport._width / Crafty.viewport._scale\n         * rect._h === Crafty.viewport._height / Crafty.viewport._scale\n         * ~~~\n         */\n        rect: function (out) {\n            out = out || this.rect_object;\n            out._x = -this._x;\n            out._y = -this._y;\n            out._w = this._width / this._scale;\n            out._h = this._height / this._scale;\n            return out;\n        },\n\n        /**@ \n\n         * #Crafty.viewport.pan\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public void Crafty.viewport.pan(Number dx, Number dy, Number time[, String|function easingFn])\n         * @param Number dx - The distance along the x axis\n         * @param Number dy - The distance along the y axis\n         * @param Number time - The duration in ms for the entire camera movement\n         * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information.\n         *\n         * Pans the camera a given number of pixels over the specified time\n         *\n         * @example\n         * ~~~\n         * // pan the camera 100 px right and down over the duration of 2 seconds using linear easing behaviour\n         * Crafty.viewport.pan(100, 100, 2000);\n         * ~~~\n         */\n        pan: (function () {\n            var targetX, targetY, startingX, startingY, easing;\n\n            function enterFrame(e) {\n                easing.tick(e.dt);\n                var v = easing.value();\n                Crafty.viewport.x = (1-v) * startingX + v * targetX;\n                Crafty.viewport.y = (1-v) * startingY + v * targetY;\n                Crafty.viewport._clamp();\n\n                if (easing.complete){\n                    stopPan();\n                    Crafty.trigger(\"CameraAnimationDone\");\n                }\n            }\n\n            function stopPan(){\n                Crafty.unbind(\"EnterFrame\", enterFrame);\n            }\n\n            Crafty._preBind(\"StopCamera\", stopPan);\n\n            return function (dx, dy, time, easingFn) {\n                // Cancel any current camera control\n                Crafty.trigger(\"StopCamera\");\n\n                // Handle request to reset\n                if (dx === 'reset') {\n                   return;\n                }\n\n                startingX = Crafty.viewport._x;\n                startingY = Crafty.viewport._y;\n                targetX = startingX - dx;\n                targetY = startingY - dy;\n\n                easing = new Crafty.easing(time, easingFn);\n\n                // bind to event, using uniqueBind prevents multiple copies from being bound\n                Crafty.uniqueBind(\"EnterFrame\", enterFrame);\n                       \n            };\n        })(),\n\n        /**@\n         * #Crafty.viewport.follow\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public void Crafty.viewport.follow(Object target, Number offsetx, Number offsety)\n         * @param Object target - An entity with the 2D component\n         * @param Number offsetx - Follow target's center should be offsetx pixels away from viewport's center. Positive values puts target to the right of the screen.\n         * @param Number offsety - Follow target's center should be offsety pixels away from viewport's center. Positive values puts target to the bottom of the screen.\n         *\n         * Follows a given entity with the 2D component. If following target will take a portion of\n         * the viewport out of bounds of the world, following will stop until the target moves away.\n         *\n         * @example\n         * ~~~\n         * var ent = Crafty.e('2D, DOM').attr({w: 100, h: 100});\n         * Crafty.viewport.follow(ent, 0, 0);\n         * ~~~\n         */\n        follow: (function () {\n            var oldTarget, offx, offy;\n\n            function change() {\n                var scale = Crafty.viewport._scale;\n                Crafty.viewport.scroll('_x', -(this.x + (this.w / 2) - (Crafty.viewport.width / 2 / scale) - offx * scale));\n                Crafty.viewport.scroll('_y', -(this.y + (this.h / 2) - (Crafty.viewport.height / 2 / scale) - offy * scale));\n                Crafty.viewport._clamp();\n            }\n\n            function stopFollow(){\n                if (oldTarget) {\n                    oldTarget.unbind('Move', change);\n                    oldTarget.unbind('ViewportScale', change);\n                    oldTarget.unbind('ViewportResize', change);\n                }\n            }\n\n            Crafty._preBind(\"StopCamera\", stopFollow);\n\n            return function (target, offsetx, offsety) {\n                if (!target || !target.has('2D'))\n                    return;\n                Crafty.trigger(\"StopCamera\");\n\n                oldTarget = target;\n                offx = (typeof offsetx !== 'undefined') ? offsetx : 0;\n                offy = (typeof offsety !== 'undefined') ? offsety : 0;\n\n                target.bind('Move', change);\n                target.bind('ViewportScale', change);\n                target.bind('ViewportResize', change);\n                change.call(target);\n            };\n        })(),\n\n        /**@\n         * #Crafty.viewport.centerOn\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public void Crafty.viewport.centerOn(Object target, Number time)\n         * @param Object target - An entity with the 2D component\n         * @param Number time - The duration in ms of the camera motion\n         *\n         * Centers the viewport on the given entity.\n         *\n         * @example\n         * ~~~\n         * var ent = Crafty.e('2D, DOM').attr({x: 250, y: 250, w: 100, h: 100});\n         * Crafty.viewport.centerOn(ent, 3000);\n         * ~~~\n         */\n        centerOn: function (targ, time) {\n            var x = targ.x + Crafty.viewport.x,\n                y = targ.y + Crafty.viewport.y,\n                mid_x = targ.w / 2,\n                mid_y = targ.h / 2,\n                cent_x = Crafty.viewport.width / 2 / Crafty.viewport._scale,\n                cent_y = Crafty.viewport.height / 2 / Crafty.viewport._scale,\n                new_x = x + mid_x - cent_x,\n                new_y = y + mid_y - cent_y;\n\n            Crafty.viewport.pan(new_x, new_y, time);\n        },\n\n        /**@\n         * #Crafty.viewport.zoom\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public void Crafty.viewport.zoom(Number amt, Number cent_x, Number cent_y, Number time[, String|function easingFn])\n         * @param Number amt - amount to zoom in on the target by (eg. 2, 4, 0.5)\n         * @param Number cent_x - the center to zoom on\n         * @param Number cent_y - the center to zoom on\n         * @param Number time - the duration in ms of the entire zoom operation\n         * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information.\n         *\n         * Zooms the camera in on a given point. amt > 1 will bring the camera closer to the subject\n         * amt < 1 will bring it farther away. amt = 0 will reset to the default zoom level\n         * Zooming is multiplicative. To reset the zoom amount, pass 0.\n         *\n         * @example\n         * ~~~\n         * // Make the entities appear twice as large by zooming in on the specified coordinates over the duration of 3 seconds using linear easing behavior\n         * Crafty.viewport.zoom(2, 100, 100, 3000);\n         * ~~~\n         */\n        zoom: (function () {\n            \n\n            function stopZoom(){\n                Crafty.unbind(\"EnterFrame\", enterFrame);\n            }\n            Crafty._preBind(\"StopCamera\", stopZoom);\n\n            var startingZoom, finalZoom, finalAmount, startingX, finalX, startingY, finalY, easing;\n\n            function enterFrame(e){\n                var amount, v;\n\n                easing.tick(e.dt);\n\n                // The scaling should happen smoothly -- start at 1, end at finalAmount, and at half way scaling should be by finalAmount^(1/2)\n                // Since value goes smoothly from 0 to 1, this fufills those requirements\n                amount = Math.pow(finalAmount, easing.value() );\n\n                // The viewport should move in such a way that no point reverses\n                // If a and b are the top left/bottom right of the viewport, then the below can be derived from\n                //      (a_0-b_0)/(a-b) = amount,\n                // and the assumption that both a and b have the same form\n                //      a = a_0 * (1-v) + a_f * v,\n                //      b = b_0 * (1-v) + b_f * v.\n                // This is just an arbitrary parameterization of the only sensible path for the viewport corners to take.\n                // And by symmetry they should be parameterized in the same way!  So not much choice here.\n                if (finalAmount === 1)\n                    v = easing.value();  // prevent NaN!  If zoom is used this way, it'll just become a pan.\n                else\n                    v = (1/amount - 1 ) / (1/finalAmount - 1);\n\n                // Set new scale and viewport position\n                Crafty.viewport.scale( amount * startingZoom );\n                Crafty.viewport.scroll(\"_x\", startingX * (1-v) + finalX * v );\n                Crafty.viewport.scroll(\"_y\", startingY * (1-v) + finalY * v );\n                Crafty.viewport._clamp();\n\n                if (easing.complete){\n                    stopZoom();\n                    Crafty.trigger(\"CameraAnimationDone\");\n                }\n\n\n            }\n\n            return function (amt, cent_x, cent_y, time, easingFn){\n                if (!amt) { // we're resetting to defaults\n                    Crafty.viewport.scale(1);\n                    return;\n                }\n\n                if (arguments.length <= 2) {\n                    time = cent_x;\n                    cent_x = Crafty.viewport.x - Crafty.viewport.width;\n                    cent_y = Crafty.viewport.y - Crafty.viewport.height;\n                }\n\n                Crafty.trigger(\"StopCamera\");\n                startingZoom = Crafty.viewport._scale;\n                finalAmount = amt;\n                finalZoom = startingZoom * finalAmount;\n                \n\n                startingX = Crafty.viewport.x;\n                startingY = Crafty.viewport.y;\n                finalX = - (cent_x - Crafty.viewport.width  / (2 * finalZoom) );\n                finalY = - (cent_y - Crafty.viewport.height / (2 * finalZoom) );\n\n                easing = new Crafty.easing(time, easingFn);\n\n                Crafty.uniqueBind(\"EnterFrame\", enterFrame);\n            };\n\n            \n        })(),\n        /**@\n         * #Crafty.viewport.scale\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public void Crafty.viewport.scale(Number amt)\n         * @param Number amt - amount to zoom/scale in on the elements\n         *\n         * Adjusts the scale (zoom). When `amt` is 1, it is set to the normal scale,\n         * e.g. an entity with `this.w == 20` would appear exactly 20 pixels wide.\n         * When `amt` is 10, that same entity would appear 200 pixels wide (i.e., zoomed in\n         * by a factor of 10), and when `amt` is 0.1, that same entity would be 2 pixels wide\n         * (i.e., zoomed out by a factor of `(1 / 0.1)`).\n         * \n         * If you pass an `amt` of 0, it is treated the same as passing 1, i.e. the scale is reset.\n         *\n         * This method sets the absolute scale, while `Crafty.viewport.zoom` sets the scale relative to the existing value.\n         * @see Crafty.viewport.zoom\n         *\n         * @example\n         * ~~~\n         * Crafty.viewport.scale(2); // Zoom in -- all entities will appear twice as large.\n         * ~~~\n         */\n        scale: (function () {\n            return function (amt) {\n                this._scale = amt ? amt : 1;\n                Crafty.trigger(\"InvalidateViewport\");\n                Crafty.trigger(\"ViewportScale\");\n\n            };\n        })(),\n\n        /**@\n         * #Crafty.viewport.mouselook\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public void Crafty.viewport.mouselook(Boolean active)\n         * @param Boolean active - Activate or deactivate mouselook\n         *\n         * Toggle mouselook on the current viewport.\n         * Simply call this function and the user will be able to\n         * drag the viewport around.\n         *\n         * If the user starts a drag, \"StopCamera\" will be triggered, which will cancel any existing camera animations.\n         */\n        mouselook: (function () {\n            var active = false,\n                dragging = false,\n                lastMouse = {};\n\n            return function (op, arg) {\n                if (typeof op === 'boolean') {\n                    active = op;\n                    if (active) {\n                        Crafty.mouseObjs++;\n                    } else {\n                        Crafty.mouseObjs = Math.max(0, Crafty.mouseObjs - 1);\n                    }\n                    return;\n                }\n                if (!active) return;\n                switch (op) {\n                case 'move':\n                case 'drag':\n                    if (!dragging) return;\n                    var diff = {\n                        x: arg.clientX - lastMouse.x,\n                        y: arg.clientY - lastMouse.y\n                    };\n\n                    lastMouse.x = arg.clientX;\n                    lastMouse.y = arg.clientY;\n\n                    Crafty.viewport.x += diff.x;\n                    Crafty.viewport.y += diff.y;\n                    Crafty.viewport._clamp();\n                    break;\n                case 'start':\n                    Crafty.trigger(\"StopCamera\");\n                    lastMouse.x = arg.clientX;\n                    lastMouse.y = arg.clientY;\n                    dragging = true;\n                    break;\n                case 'stop':\n                    dragging = false;\n                    break;\n                }\n            };\n        })(),\n        _clamp: function () {\n            // clamps the viewport to the viewable area\n            // under no circumstances should the viewport see something outside the boundary of the 'world'\n            if (!this.clampToEntities) return;\n            var bound = Crafty.clone(this.bounds) || Crafty.clone(Crafty.map.boundaries());\n            bound.max.x *= this._scale;\n            bound.min.x *= this._scale;\n            bound.max.y *= this._scale;\n            bound.min.y *= this._scale;\n            if (bound.max.x - bound.min.x > Crafty.viewport.width) {\n                if (Crafty.viewport.x < (-bound.max.x + Crafty.viewport.width) / this._scale) {\n                    Crafty.viewport.x = (-bound.max.x + Crafty.viewport.width) / this._scale;\n                } else if (Crafty.viewport.x > -bound.min.x) {\n                    Crafty.viewport.x = -bound.min.x;\n                }\n            } else {\n                Crafty.viewport.x = -1 * (bound.min.x + (bound.max.x - bound.min.x) / 2 - Crafty.viewport.width / 2);\n            }\n            if (bound.max.y - bound.min.y > Crafty.viewport.height) {\n                if (Crafty.viewport.y < (-bound.max.y + Crafty.viewport.height) / this._scale) {\n                    Crafty.viewport.y = (-bound.max.y + Crafty.viewport.height) / this._scale;\n                } else if (Crafty.viewport.y > -bound.min.y) {\n                    Crafty.viewport.y = -bound.min.y;\n                }\n            } else {\n                Crafty.viewport.y = -1 * (bound.min.y + (bound.max.y - bound.min.y) / 2 - Crafty.viewport.height / 2);\n            }\n        },\n\n        /**@\n         * #Crafty.viewport.init\n         * @comp Crafty.stage\n         * @kind Method\n         * \n         * @sign public void Crafty.viewport.init([Number width, Number height, String stage_elem])\n         * @sign public void Crafty.viewport.init([Number width, Number height, HTMLElement stage_elem])\n         * @param Number width - Width of the viewport\n         * @param Number height - Height of the viewport\n         * @param String or HTMLElement stage_elem - the element to use as the stage (either its id or the actual element).\n         *\n         * Initialize the viewport.\n         * If the arguments 'width' or 'height' are missing, use `window.innerWidth` and `window.innerHeight` (full screen model).\n         * The argument 'stage_elem' is used to specify a stage element other than the default, and can be either a string or an HTMLElement.  If a string is provided, it will look for an element with that id and, if none exists, create a div.  If an HTMLElement is provided, that is used directly.  Omitting this argument is the same as passing an id of 'cr-stage'.\n         *\n         * Usually you don't have to initialize the viewport by yourself, it's automatically initialized by calling `Crafty.init()`. Multiple `init`s will create redundant stage elements. Use `Crafty.viewport.width`, `Crafty.viewport.height` or `Crafty.viewport.reload` to adjust the current viewport's dimensions.\n         *\n         * @see Crafty.device, Crafty.domHelper, Crafty.stage, Crafty.viewport.reload\n         */\n        init: function (w, h, stage_elem) {\n            // Define default graphics layers with default z-layers\n            Crafty.createLayer(\"DefaultCanvasLayer\", \"Canvas\", {z: 20});\n            Crafty.createLayer(\"DefaultDOMLayer\", \"DOM\", {z: 30});\n            Crafty.createLayer(\"DefaultWebGLLayer\", \"WebGL\", {z: 10});\n            \n            // setters+getters for the viewport\n            this._defineViewportProperties();\n\n            // Set initial values -- necessary on restart\n            this._x = 0;\n            this._y = 0;\n            this._scale = 1;\n            this.bounds = null;\n\n            // If no width or height is defined, the width and height is set to fullscreen\n            this._width = w || window.innerWidth;\n            this._height = h || window.innerHeight;\n\n            //check if stage exists\n            if (typeof stage_elem === 'undefined')\n                stage_elem = \"cr-stage\";\n\n            var crstage;\n            if (typeof stage_elem === 'string')\n                crstage = document.getElementById(stage_elem);\n            else if (typeof HTMLElement !== \"undefined\" ? stage_elem instanceof HTMLElement : stage_elem instanceof Element)\n                crstage = stage_elem;\n            else\n                throw new TypeError(\"stage_elem must be a string or an HTMLElement\");\n\n            /**@\n             * #Crafty.stage\n             * @category Core\n             * @kind CoreObject\n             * \n             * The stage where all the DOM entities will be placed.\n             */\n\n            /**@\n             * #Crafty.stage.elem\n             * @comp Crafty.stage\n             * @kind Property\n             * \n             * The `#cr-stage` div element.\n             */\n\n            //create stage div to contain everything\n            Crafty.stage = {\n                x: 0,\n                y: 0,\n                fullscreen: false,\n                elem: (crstage ? crstage : document.createElement(\"div\")),\n            };\n\n            //fullscreen, stop scrollbars\n            if (!w && !h) {\n                document.body.style.overflow = \"hidden\";\n                Crafty.stage.fullscreen = true;\n            }\n\n            Crafty.addEvent(this, window, \"resize\", Crafty.viewport.reload);\n\n            Crafty.addEvent(this, window, \"blur\", function () {\n                if (Crafty.settings.get(\"autoPause\")) {\n                    if (!Crafty._paused) Crafty.pause();\n                }\n            });\n            Crafty.addEvent(this, window, \"focus\", function () {\n                if (Crafty._paused && Crafty.settings.get(\"autoPause\")) {\n                    Crafty.pause();\n                }\n            });\n\n            //make the stage unselectable\n            Crafty.settings.register(\"stageSelectable\", function (v) {\n                Crafty.stage.elem.onselectstart = v ? function () {\n                    return true;\n                } : function () {\n                    return false;\n                };\n            });\n            Crafty.settings.modify(\"stageSelectable\", false);\n\n            //make the stage have no context menu\n            Crafty.settings.register(\"stageContextMenu\", function (v) {\n                Crafty.stage.elem.oncontextmenu = v ? function () {\n                    return true;\n                } : function () {\n                    return false;\n                };\n            });\n            Crafty.settings.modify(\"stageContextMenu\", false);\n\n            Crafty.settings.register(\"autoPause\", function () {});\n            Crafty.settings.modify(\"autoPause\", false);\n\n            //add to the body and give it an ID if not exists\n            if (!crstage) {\n                document.body.appendChild(Crafty.stage.elem);\n                Crafty.stage.elem.id = stage_elem;\n            }\n\n            var elem = Crafty.stage.elem.style,\n                offset;\n\n            //css style\n            elem.width = this.width + \"px\";\n            elem.height = this.height + \"px\";\n            elem.overflow = \"hidden\";\n\n\n            // resize events\n            Crafty.bind(\"ViewportResize\", function(){Crafty.trigger(\"InvalidateViewport\");});\n\n            if (Crafty.mobile) {\n\n                // remove default gray highlighting after touch\n                if (typeof elem.webkitTapHighlightColor !== undefined) {\n                    elem.webkitTapHighlightColor = \"rgba(0,0,0,0)\";\n                }\n\n                var meta = document.createElement(\"meta\"),\n                    head = document.getElementsByTagName(\"head\")[0];\n\n                //hide the address bar\n                meta = document.createElement(\"meta\");\n                meta.setAttribute(\"name\", \"apple-mobile-web-app-capable\");\n                meta.setAttribute(\"content\", \"yes\");\n                head.appendChild(meta);\n\n                Crafty.addEvent(this, Crafty.stage.elem, \"touchmove\", function (e) {\n                    e.preventDefault();\n                });\n\n\n            }\n            \n            elem.position = \"relative\";\n            //find out the offset position of the stage\n            offset = Crafty.domHelper.innerPosition(Crafty.stage.elem);\n            Crafty.stage.x = offset.x;\n            Crafty.stage.y = offset.y;\n\n            Crafty.uniqueBind(\"ViewportResize\", this._resize);\n        },\n\n        _resize: function(){\n            Crafty.stage.elem.style.width = Crafty.viewport.width + \"px\";\n            Crafty.stage.elem.style.height = Crafty.viewport.height + \"px\";\n        },\n\n        // Create setters/getters for x, y, width, height\n        _defineViewportProperties: function(){\n            Object.defineProperty(this, 'x', {\n                set: function (v) {\n                    this.scroll('_x', v);\n                },\n                get: function () {\n                    return this._x;\n                },\n                configurable : true\n            });\n            Object.defineProperty(this, 'y', {\n                set: function (v) {\n                    this.scroll('_y', v);\n                },\n                get: function () {\n                    return this._y;\n                },\n                configurable : true\n            });\n            Object.defineProperty(this, 'width', {\n                set: function (v) {\n                    this._width = v;\n                    Crafty.trigger(\"ViewportResize\");\n                },\n                get: function () {\n                    return this._width;\n                },\n                configurable : true\n            });\n            Object.defineProperty(this, 'height', {\n                set: function (v) {\n                    this._height = v;\n                    Crafty.trigger(\"ViewportResize\");\n                },\n                get: function () {\n                    return this._height;\n                },\n                configurable : true\n            });\n        },\n\n        /**@\n         * #Crafty.viewport.reload\n         * @comp Crafty.stage\n         * @kind Method\n         *\n         * @sign public Crafty.viewport.reload()\n         *\n         * Recalculate and reload stage width, height and position.\n         * Useful when browser return wrong results on init (like safari on Ipad2).\n         * You should also call this method if you insert custom DOM elements that affect Crafty's stage offset.\n         *\n         */\n        reload: function () {\n            var w = window.innerWidth,\n                h= window.innerHeight,\n                offset;\n\n\n            if (Crafty.stage.fullscreen) {\n                this._width = w;\n                this._height = h;\n                Crafty.trigger(\"ViewportResize\");\n            }\n\n            offset = Crafty.domHelper.innerPosition(Crafty.stage.elem);\n            Crafty.stage.x = offset.x;\n            Crafty.stage.y = offset.y;\n        },\n\n        /**@\n         * #Crafty.viewport.reset\n         * @comp Crafty.stage\n         * @kind Method\n         * \n         * @trigger StopCamera - called to cancel camera animations\n         *\n         * @sign public Crafty.viewport.reset()\n         *\n         * Resets the viewport to starting values, and cancels any existing camera animations.\n         * Called when scene() is run.\n         */\n        reset: function () {\n            Crafty.viewport.mouselook(\"stop\");\n            Crafty.trigger(\"StopCamera\");\n            // Reset viewport position and scale\n            Crafty.viewport.scroll(\"_x\", 0);\n            Crafty.viewport.scroll(\"_y\", 0);\n            Crafty.viewport.scale(1);\n        },\n\n        /**@\n         * #Crafty.viewport.onScreen\n         * @comp Crafty.viewport\n         * @kind Method\n         * \n         * @sign public Crafty.viewport.onScreen(Object rect)\n         * @param rect - A rectangle with field {_x: x_val, _y: y_val, _w: w_val, _h: h_val}\n         *\n         * Test if a rectangle is completely in viewport\n         */\n        onScreen: function (rect) {\n            return Crafty.viewport._x + rect._x + rect._w > 0 && Crafty.viewport._y + rect._y + rect._h > 0 &&\n                Crafty.viewport._x + rect._x < Crafty.viewport.width && Crafty.viewport._y + rect._y < Crafty.viewport.height;\n        }\n    }\n});\n"},"hash":"c99158c8ee53637b4f43f24658bde4b9"}