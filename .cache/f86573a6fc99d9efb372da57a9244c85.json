{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js');\n\n\n// Dictionary of existing systems\nCrafty._systems = {};\n\n/**@\n * #Crafty.s\n * @category Core\n * @kind Method\n *\n * Registers a system.\n *\n * @trigger SystemLoaded - When the system has initialized itself - obj - system object\n * @trigger SystemDestroyed - Right before the system is destroyed - obj - system object\n *\n * @sign void Crafty.s(String name, Obj template[, Obj options][, Boolean lazy])\n * Register a system\n * @param name - The name of the system\n * @param template - an object whose methods and properties will be copied to the new system\n * @param options - an object whose properties will be deep copied to the new system's options property\n * @param lazy - a flag that indicates whether the system should be initialized right away or the first time it is referenced\n *\n * @sign System Crafty.s(String name)\n * Access the named system\n * @param name - The system to return\n * @returns The referenced system.  If the system has not been initialized, it will be before it is returned.\n *\n * Objects which handle entities might want to subscribe to the event system without being entities themselves.\n * When you declare a system with a template object, all the methods and properties of that template are copied to a new object.\n * This new system will automatically have the following event related methods, which function like those of components: `.bind()`, `unbind()`, `trigger()`, `one()`, `uniqueBind()`, `destroy()`.\n * Much like components, you can also provide `init()` and `remove()` methods, as well as an `events` parameter for automatically binding to events.\n *\n * @note The `init()` method is for setting up the internal state of the system -- if you create entities in it that then reference the system, that'll create an infinite loop.\n */\nCrafty.s = function(name, obj, options, lazy) {\n    if (obj) {\n        if (typeof options === \"boolean\") {\n            lazy = options;\n            options = null;\n        }\n        if (lazy === false) {\n            Crafty._systems[name] = new Crafty.CraftySystem(name, obj, options);\n            Crafty.trigger(\"SystemLoaded\", name);\n        } else {\n            Crafty._registerLazySystem(name, obj, options);\n        }\n    } else {\n        return Crafty._systems[name];\n    }\n};\n\nfunction optionMerge(defaults, specific){\n    var options = {};\n    // Copy all the specified keys, then all the default keys that aren't specified\n    for (var key in specific) {\n        options[key] = specific[key];\n    }\n    for (key in defaults) {\n        if (!(key in specific)) {\n            options[key] = defaults[key];\n        }\n    } \n    return options;\n}\n\n\nCrafty._registerLazySystem = function(name, obj, options) {\n    // This is a bit of magic to only init a system if it's requested at least once.\n    // We define a getter for _systems[name] that will first initialize the system, \n    // and then redefine _systems[name] to remove that getter.\n    Object.defineProperty(Crafty._systems, name, {\n        get: function() {\n            Object.defineProperty(Crafty._systems, name, {\n                value: new Crafty.CraftySystem(name, obj, options),\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            Crafty.trigger(\"SystemLoaded\", name);\n            return Crafty._systems[name];\n        },\n        configurable: true\n    });\n\n};\n\n// Each system has its properties and methods copied onto an object of this type\nCrafty.CraftySystem = (function() {\n    var systemID = 1;\n    return function(name, template, options) {\n        this.name = name;\n        if (!template) return this;\n        this._systemTemplate = template;\n        this.extend(template);\n        \n        // Overwrite any default options with the passed options object\n        // This does a deep copy on the objects, and treats null as a specified value\n        this.options = optionMerge(this.options, options);\n\n        // Add the \"low leveL\" callback methods\n        Crafty._addCallbackMethods(this);\n\n        // Give this object a global ID.  Used for event handlers.\n        this[0] = \"system\" + (systemID++);\n        // Run any instantiation code\n        if (typeof this.init === \"function\") {\n            this.init(name);\n        }\n        // If an events object is provided, bind the listed event handlers\n        if (\"events\" in template) {\n            var auto = template.events;\n            for (var eventName in auto) {\n                var fn = typeof auto[eventName] === \"function\" ? auto[eventName] : template[auto[eventName]];\n                this.bind(eventName, fn);\n            }\n        }\n    };\n})();\n\n\n\nCrafty.CraftySystem.prototype = {\n    extend: function(obj) {\n        // Copy properties and methods of obj\n        for (var key in obj) {\n            if (typeof this[key] === \"undefined\") {\n                this[key] = obj[key];\n            }\n        }\n    },\n\n    // Event methods\n    bind: function(event, callback) {\n        this._bindCallback(event, callback);\n        return this;\n    },\n\n    trigger: function(event, data) {\n        this._runCallbacks(event, data);\n        return this;\n    },\n\n    unbind: function(event, callback) {\n        this._unbindCallbacks(event, callback);\n        return this;\n    },\n\n    one: function(event, callback) {\n        var self = this;\n        var oneHandler = function(data) {\n            callback.call(self, data);\n            self.unbind(event, oneHandler);\n        };\n        return self.bind(event, oneHandler);\n    },\n\n    uniqueBind: function(event, callback) {\n        this.unbind(event, callback);\n        return this.bind(event, callback);\n    },\n\n    destroy: function() {\n        Crafty.trigger(\"SystemDestroyed\", this);\n        // Check the template itself\n        if (typeof this.remove === \"function\") {\n            this.remove();\n        }\n        this._unbindAll();\n        delete Crafty._systems[this.name];\n    }\n\n};"},"hash":"15f6a9ef390fb9c6cf114785f59c2057"}