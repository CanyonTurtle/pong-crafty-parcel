{"dependencies":[{"name":"./setup","loc":{"line":1,"column":23}},{"name":"./score","loc":{"line":2,"column":70}},{"name":"./ball-final.png","loc":{"line":3,"column":20}}],"generated":{"js":"\"use strict\";\n\nvar _setup = require(\"./setup\");\n\nvar Setup = _interopRequireWildcard(_setup);\n\nvar _score = require(\"./score\");\n\nvar _ballFinal = require(\"./ball-final.png\");\n\nvar _ballFinal2 = _interopRequireDefault(_ballFinal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nCrafty.c('Ball', {\n  start({ x, y, vx, vy }) {\n    this.isCollidingWithPaddle = false;\n    this.addComponent('2D, Canvas, Color, Bounded, Solid, Collision, pingpongball');\n\n    this.x = x;\n    this.y = y;\n    this.vx = vx;\n    this.vy = vy;\n\n    let ctx = this;\n    this.bind('moveBall', function (dt) {\n      ctx.x += ctx.vx * (dt / 1000);\n      ctx.y += ctx.vy * (dt / 1000);\n      this.bounceOffWalls();\n\n      // check for paddle collision\n      var hitDatas;\n      var hitData;\n      if (hitDatas = this.hit('Paddle')) {\n        if (!this.isCollidingWithPaddle) {\n          this.vx *= -1;\n          this.vy += Setup.scaleY(30) * hitDatas[0].obj.movingDir;\n          (0, _score.incrementBounceCount)();\n        }\n        this.isCollidingWithPaddle = true;\n      } else {\n        this.isCollidingWithPaddle = false;\n      }\n\n      // check for hits to walls\n      if (this.x === Setup.bounds.left) {\n        (0, _score.incrementScore2)();\n      }\n      if (this.x === Setup.bounds.right - this.w) {\n        (0, _score.incrementScore1)();\n      }\n    });\n  }\n});"},"hash":"6f241bdb4bbe362cb04f636f23011c83"}