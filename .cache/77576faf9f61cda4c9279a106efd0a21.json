{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js');\n\n\n/**@\n * #Tween\n * @category Animation\n * @kind Component\n * \n * @trigger TweenEnd - when a tween finishes - String - property\n *\n * Component to animate the change in 2D properties over time.\n */\nmodule.exports = {\n\n  init: function(){\n    this.tweenGroup = {};\n    this.tweenStart = {};\n    this.tweens = [];\n    this.uniqueBind(\"EnterFrame\", this._tweenTick);\n\n  },\n\n  _tweenTick: function(frameData){\n    var tween, v, i;\n    for ( i = this.tweens.length-1; i>=0; i--){\n      tween = this.tweens[i];\n      tween.easing.tick(frameData.dt);\n      v  = tween.easing.value();\n      this._doTween(tween.props, v);\n      if (tween.easing.complete) {\n        this.tweens.splice(i, 1);\n        this._endTween(tween.props);\n      }\n    }\n  },\n\n  _doTween: function(props, v){\n    for (var name in props)\n      this[name] = (1-v) * this.tweenStart[name] + v * props[name];\n\n  },\n\n\n\n  /**@\n  * #.tween\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .tween(Object properties, Number duration[, String|function easingFn])\n  * @param properties - Object of numeric properties and what they should animate to\n  * @param duration - Duration to animate the properties over, in milliseconds.\n  * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information.\n  *\n  * This method will animate numeric properties over the specified duration.\n  * These include `x`, `y`, `w`, `h`, `alpha` and `rotation`.\n  *\n  * The object passed should have the properties as keys and the value should be the resulting\n  * values of the properties.  The passed object might be modified if later calls to tween animate the same properties.\n  *\n  * @example\n  * Move an object to 100,100 and fade out over 200 ms.\n  * ~~~\n  * Crafty.e(\"2D, Tween\")\n  *    .attr({alpha: 1.0, x: 0, y: 0})\n  *    .tween({alpha: 0.0, x: 100, y: 100}, 200)\n  * ~~~\n  * @example\n  * Rotate an object over 2 seconds, using the \"smootherStep\" easing function.\n  * ~~~\n  * Crafty.e(\"2D, Tween\")\n  *    .attr({rotation:0})\n  *    .tween({rotation:180}, 2000, \"smootherStep\")\n  * ~~~\n  *\n  * @see Crafty.easing\n  *\n  */\n  tween: function (props, duration, easingFn) {\n\n    var tween = {\n      props: props,\n      easing: new Crafty.easing(duration, easingFn)\n    };\n\n    // Tweens are grouped together by the original function call.\n    // Individual properties must belong to only a single group\n    // When a new tween starts, if it already belongs to a group, move it to the new one\n    // Record the group it currently belongs to, as well as its starting coordinate.\n    for (var propname in props){\n      if (typeof this.tweenGroup[propname] !== \"undefined\")\n        this.cancelTween(propname);\n      this.tweenStart[propname] = this[propname];\n      this.tweenGroup[propname] = props;\n    }\n    this.tweens.push(tween);\n\n    return this;\n\n  },\n\n  /**@\n  * #.cancelTween\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .cancelTween(String target)\n  * @param target - The property to cancel\n  *\n  * @sign public this .cancelTween(Object target)\n  * @param target - An object containing the properties to cancel.\n  *\n  * Stops tweening the specified property or properties.\n  * Passing the object used to start the tween might be a typical use of the second signature.\n  */\n  cancelTween: function(target){\n    if (typeof target === \"string\"){\n      if (typeof this.tweenGroup[target] === \"object\" )\n        delete this.tweenGroup[target][target];\n    } else if (typeof target === \"object\") {\n      for (var propname in target)\n        this.cancelTween(propname);\n    }\n\n    return this;\n\n  },\n\n  /**@\n  * #.pauseTweens\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .pauseTweens()\n  *\n  * Pauses all tweens associated with the entity\n  */\n  pauseTweens: function(){\n      this.tweens.map(function(e){e.easing.pause();});\n  },\n\n  /**@\n  * #.resumeTweens\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .resumeTweens()\n  *\n  * Resumes all paused tweens associated with the entity\n  */\n  resumeTweens: function(){\n      this.tweens.map(function(e){e.easing.resume();});\n  },\n\n  /*\n  * Stops tweening the specified group of properties, and fires the \"TweenEnd\" event.\n  */\n  _endTween: function(properties){\n    for (var propname in properties){\n      delete this.tweenGroup[propname];\n    }\n    this.trigger(\"TweenEnd\", properties);\n  }\n};\n"},"hash":"29a59fe3a6a9b61542e3e8bd4e37fccf"}