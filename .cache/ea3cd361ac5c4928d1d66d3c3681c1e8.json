{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js');\n\n\n/**@\n * #Model\n * @category Model\n * @kind Component\n * \n * Model is a component that offers new features for isolating business\n * logic in your application. It offers default values, dirty values,\n * and deep events on your data.\n *\n * All data should be accessed via the appropriate methods `.get`, `.set`,\n * and `.data` for the proper events to be triggered. It is not encouraged\n * to access them directly.\n *\n * Dirty values make it simple to inspect a model and see what values have changed.\n *\n * Deep events allow you to bind to specific fields, like `name` or even deep fields\n * like `contact.email` and get notified when those specific fields are updated.\n *\n * @trigger Change - When any data on the model has changed.\n * @trigger Change[key] - When the specific key on the model has changed.\n * @trigger Change[key.key] - The nested key value has changed.\n * @example\n * ~~~\n * Crafty.c('Person', {\n *   name: 'Fox',\n *   init: function() { this.requires('Model'); }\n * });\n * person = Crafty.e('Person').attr({name: 'blaine'});\n * person.bind('Change[name]', function() {\n *   Crafty.log('name changed!');\n * });\n * person.attr('name', 'blainesch'); // Triggers event\n * person.is_dirty('name'); // true\n * person.changed // name\n * ~~~\n */\nmodule.exports = {\n  init: function() {\n    this.changed = [];\n    this.bind('Change', this._changed_attributes);\n    this.bind('Change', this._changed_triggers);\n  },\n\n  /**\n   * Fires more specific `Change` events.\n   *\n   * For instance a `Change[name]` may get fired when you\n   * update the name data attribute on the model.\n   */\n  _changed_triggers: function(data, options) {\n    var key;\n    options = Crafty.extend.call({pre: ''}, options);\n    for (key in data) {\n      this.trigger('Change[' + options.pre + key + ']', data[key]);\n      if (data[key].constructor === Object) {\n        this._changed_triggers(data[key], {\n          pre: options.pre + key + '.'\n        });\n      }\n    }\n  },\n\n  /**\n   * Pushes all top-levle changed attribute names to the\n   * changed array.\n   */\n  _changed_attributes: function(data) {\n    var key;\n    for (key in data) {\n      this.changed.push(key);\n    }\n    return this;\n  },\n\n  /**@\n   * #.is_dirty\n   * @comp Model\n   * @kind Method\n   * \n   * Helps determine when data or the entire component is \"dirty\" or has changed attributes.\n   *\n   * @example\n   * ~~~\n   * person = Crafty.e('Person').attr({name: 'Fox', age: 24})\n   * person.is_dirty() // false\n   * person.is_dirty('name') // false\n   *\n   * person.attr('name', 'Lucky');\n   * person.is_dirty(); // true\n   * person.is_dirty('name'); // true\n   * person.is_dirty('age'); // false\n   * person.changed; // ['name']\n   * ~~~\n   */\n  is_dirty: function(key) {\n    if (arguments.length === 0) {\n      return !!this.changed.length;\n    } else {\n      return this.changed.indexOf(key) > -1;\n    }\n  }\n};\n\n"},"hash":"f21530516eaf262f7ff002ee27bc1c88"}