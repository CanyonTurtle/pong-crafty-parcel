{"dependencies":[{"name":"../core/core.js","loc":{"line":1,"column":21}}],"generated":{"js":"var Crafty = require('../core/core.js');\n\n\n/**@\n * #Crafty.easing\n * @category Animation\n * @kind Class\n * \n *\n * An object for tracking transitions.  Typically used indirectly through \"SpriteAnimation\", \"Tween\", or viewport animations.\n * \n * If a method allows you to specify the type of easing, you can do so by providing a custom function or a string corresponding to the name of a built-in method.\n *\n * Built-in easing functions are \"linear\", \"smoothStep\", \"smootherStep\", \"easeInQuad\", \"easeOutQuad\", and \"easeInOutQuad\".\n *\n * A custom function will be passed a parameter `t` which will vary between 0 and 1, and should return the progress of the animation between 0 and 1.\n * @example\n * Here is how you might use easing functions with the \"Tween\" component.\n * ~~~~\n * var e = Crafty.e(\"2D, Tween\");\n * // Use built-in easing functions\n * e.tween({x:100}, 1000, \"smoothStep\");\n * e.tween({y:100}, 1000, \"easeInQuad\");\n * // Define a custom easing function: 2t^2 - t\n * e.tween({w:0}, 1000, function(t){return 2*t*t - t;});\n * ~~~\n * @see Tween, SpriteAnimation\n */\nvar easing = function(duration, easingFn) {\n\tthis.timePerFrame = 1000 / Crafty.timer.FPS();\n\tthis.duration = duration;   //default duration given in ms\n\tif (typeof easingFn === \"function\"){\n\t\tthis.easing_function = easingFn;\n\t} else if (typeof easingFn === \"string\" && this.standardEasingFunctions[easingFn]){\n\t\tthis.easing_function = this.standardEasingFunctions[easingFn];\n\t} else {\n\t\tthis.easing_function = this.standardEasingFunctions.linear;\n\t}\n\tthis.reset();\n};\n\n\neasing.prototype = {\n\tduration: 0,\n\tclock:0,\n\tsteps: null,\n\tcomplete: false,\n\tpaused: false,\n\n\t// init values\n\treset: function(){\n\t\tthis.loops = 1;\n\t\tthis.clock = 0;\n\t\tthis.complete = false;\n\t\tthis.paused = false;\n\t},\n\n\trepeat: function(loopCount){\n\t\tthis.loops = loopCount;\n\t},\n\n\tsetProgress: function(progress, loopCount){\n\t\tthis.clock = this.duration * progress;\n\t\tif (typeof loopCount !== \"undefined\")\n\t\t\tthis.loops = loopCount;\n\n\t},\n\n\tpause: function(){\n\t\tthis.paused = true;\n\t},\n\n\tresume: function(){\n\t\tthis.paused = false;\n\t\tthis.complete = false;\n\t},\n\n\t// Increment the clock by some amount dt\n\t// Handles looping and sets a flag on completion\n\ttick: function(dt){\n\t\tif (this.paused || this.complete) return;\n\t\tthis.clock += dt;\n\t\tthis.frames = Math.floor(this.clock/this.timePerFrame);\n\t\twhile (this.clock >= this.duration && this.complete === false){\n\t\t\tthis.loops--;\n\t\t\tif (this.loops > 0)\n\t\t\t\tthis.clock -= this.duration;\n\t\t\telse\n\t\t\t\tthis.complete = true;\n\t\t}\n\t},\n\n\t// same as value for now; with other time value functions would be more useful\n\ttime: function(){\n\t\treturn ( Math.min(this.clock/this.duration, 1) );\n\n\t},\n\n\t// Value is where along the tweening curve we are\n\tvalue: function(){\n\t\treturn this.easing_function(this.time());\n\t},\n\n\t// Easing functions, formulas taken from https://gist.github.com/gre/1650294\n\t//\tand https://en.wikipedia.org/wiki/Smoothstep\n\tstandardEasingFunctions: {\n\t\t// no easing, no acceleration\n\t\tlinear: function (t) { return t; },\n\t\t// smooth step; starts and ends with v=0\n\t\tsmoothStep: function(t){ return (3-2*t)*t*t; },\n\t\t// smootherstep; starts and ends with v, a=0\n\t\tsmootherStep: function(t){ return (6*t*t-15*t+10)*t*t*t; },\n\t\t// quadratic curve; starts with v=0\n\t\teaseInQuad: function (t) { return t*t; },\n\t\t// quadratic curve; ends with v=0\n\t\teaseOutQuad: function (t) { return t*(2-t); },\n\t\t// quadratic curve; starts and ends with v=0\n\t\teaseInOutQuad: function (t) { return t<0.5 ? 2*t*t : (4-2*t)*t-1; }\n\t}\n};\n\nmodule.exports = easing;"},"hash":"6ad5f2ac161cd4b12ab47ebd41db463a"}